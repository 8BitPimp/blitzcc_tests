
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	sub	esp,4
	mov	eax,_amenuid
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,10
	mov	esi,_amenuid
	add	esi,12
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_amenuid
	mov	[esp],eax
	call	__bbDimArray
	ret
_2_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fblitzmenu
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,16
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	cmp	[ebp+56],0
	setz	al
	movzx	eax,al
	cmp	eax,0
	jnz	_8
	sub	esp,16
	mov	[esp+8],0
	mov	[esp+12],255
	mov	[esp+4],255
	mov	eax,[ebp+56]
	mov	[esp],eax
	call	_fmaskimage
_8
	sub	esp,4
	call	_fbackbuffer
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,12
	mov	[esp+4],216
	mov	[esp+8],209
	mov	[esp],219
	call	_fcolor
	sub	esp,20
	mov	[esp+12],18
	mov	[esp+16],1
	sub	esp,8
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_frect
	call	_fmousex
	mov	[ebp-12],eax
	sub	esp,4
	mov	[ebp-16],eax
	sub	esp,4
	lea	ebx,[ebp+24]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	_fstringwidth
	mov	ebx,eax
	mov	eax,[ebp-12]
	add	ebx,10
	add	ebx,[ebp+28]
	cmp	eax,ebx
	setl	al
	movzx	eax,al
	mov	[ebp-12],eax
	mov	[ebp-16],eax
	mov	eax,ebx
	call	_fmousex
	mov	ebx,eax
	mov	eax,[ebp-16]
	cmp	ebx,[ebp+28]
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-12]
	and	ebx,eax
	call	_fmousey
	cmp	eax,[ebp+32]
	setg	al
	movzx	eax,al
	and	ebx,eax
	call	_fmousey
	mov	esi,[ebp+32]
	add	esi,18
	cmp	eax,esi
	setl	al
	movzx	eax,al
	and	ebx,eax
	and	ebx,ebx
	jz	_9
	mov	eax,[ebp+20]
	sub	eax,1
	shl	eax,byte 2
	add	eax,[_amenuid]
	mov	eax,[eax]
	cmp	eax,1
	setz	al
	movzx	eax,al
	mov	[ebp-12],eax
	mov	ebx,[ebp+20]
	add	ebx,1
	shl	ebx,byte 2
	add	ebx,[_amenuid]
	mov	ebx,[ebx]
	cmp	ebx,1
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-12]
	or	eax,ebx
	and	eax,eax
	jz	_10
	cmp	[ebp+48],0
	setz	al
	movzx	eax,al
	cmp	eax,0
	jnz	_11
	sub	esp,4
	mov	eax,[ebp+48]
	mov	[esp],eax
	call	_fplaysound
_11
	mov	ebx,1
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_amenuid]
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	sub	esi,1
	shl	esi,byte 2
	add	esi,[_amenuid]
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	add	esi,1
	shl	esi,byte 2
	add	esi,[_amenuid]
	mov	[esi],ebx
_10
	sub	esp,4
	mov	[esp],1
	call	_fmousehit
	and	eax,eax
	jz	_12
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_amenuid]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_amenuid]
	mov	[ebx],eax
	cmp	[ebp+48],0
	setz	al
	movzx	eax,al
	cmp	eax,0
	jnz	_13
	sub	esp,4
	mov	eax,[ebp+48]
	mov	[esp],eax
	call	_fplaysound
_13
_12
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_amenuid]
	mov	ebx,[ebx]
	cmp	ebx,0
	jnz	_14
	sub	esp,12
	mov	[esp+4],189
	mov	[esp+8],210
	mov	[esp],182
	call	_fcolor
	jmp	_15
_14
	sub	esp,12
	mov	[esp+4],216
	mov	[esp+8],209
	mov	[esp],219
	call	_fcolor
_15
	sub	esp,20
	mov	[esp+12],19
	mov	[esp+16],1
	sub	esp,8
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],36
	mov	[esp+8],106
	mov	[esp],10
	call	_fcolor
	sub	esp,16
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+32]
	add	esi,18
	mov	[esp+12],esi
	mov	esi,[ebp+32]
	mov	[esp+4],esi
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_fline
	sub	esp,24
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	mov	[esp+12],ebx
	mov	ebx,[ebp+32]
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_fline
	sub	esp,24
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+12],ebx
	mov	ebx,[ebp+32]
	mov	[esp+4],ebx
	sub	esp,8
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp],eax
	call	_fline
	sub	esp,24
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+12],ebx
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_fline
_9
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_amenuid]
	mov	ebx,[ebx]
	and	ebx,ebx
	jz	_16
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],1
	sub	esp,4
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	add	ebx,10
	mov	[esp+4],ebx
	sub	esp,8
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	sar	eax,byte 1
	add	eax,[ebp+28]
	add	eax,6
	mov	[esp],eax
	call	_ftext
	sub	esp,12
	mov	[esp+4],102
	mov	[esp+8],102
	mov	[esp],102
	call	_fcolor
	sub	esp,16
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+32]
	add	esi,18
	mov	[esp+12],esi
	mov	esi,[ebp+32]
	mov	[esp+4],esi
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_fline
	sub	esp,24
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	mov	[esp+12],ebx
	mov	ebx,[ebp+32]
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_fline
	sub	esp,24
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+12],ebx
	mov	ebx,[ebp+32]
	mov	[esp+4],ebx
	sub	esp,8
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,[ebp+28]
	add	eax,10
	mov	[esp],eax
	call	_fline
	sub	esp,12
	mov	[esp+4],102
	mov	[esp+8],102
	mov	[esp],102
	call	_fcolor
	sub	esp,20
	mov	ebx,22
	imul	ebx,[ebp+36]
	add	ebx,4
	mov	[esp+12],ebx
	mov	[esp+16],1
	mov	esi,[ebp+44]
	add	esi,2
	mov	[esp+8],esi
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,20
	mov	ebx,22
	imul	ebx,[ebp+36]
	add	ebx,2
	mov	[esp+12],ebx
	mov	[esp+16],1
	mov	esi,[ebp+44]
	mov	[esp+8],esi
	mov	ebx,[ebp+32]
	add	ebx,19
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	add	eax,1
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],216
	mov	[esp+8],209
	mov	[esp],219
	call	_fcolor
	sub	esp,24
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,10
	add	eax,[ebp+28]
	sub	eax,1
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+12],ebx
	mov	ebx,[ebp+32]
	add	ebx,18
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	add	eax,1
	mov	[esp],eax
	call	_fline
	sub	esp,12
	mov	[esp+4],216
	mov	[esp+8],209
	mov	[esp],219
	call	_fcolor
	sub	esp,20
	mov	ebx,22
	imul	ebx,[ebp+36]
	mov	[esp+12],ebx
	mov	[esp+16],1
	mov	[esp+8],25
	mov	ebx,[ebp+32]
	add	ebx,20
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	add	eax,2
	mov	[esp],eax
	call	_frect
	call	_fmousex
	mov	ebx,[ebp+28]
	add	ebx,2
	cmp	eax,ebx
	setg	al
	movzx	eax,al
	mov	[ebp-12],eax
	mov	[ebp-16],eax
	mov	eax,ebx
	call	_fmousex
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	esi,[ebp+44]
	sub	esi,2
	add	esi,[ebp+28]
	cmp	ebx,esi
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-12]
	and	eax,ebx
	and	eax,eax
	jz	_17
	mov	ebx,[ebp+32]
	add	ebx,20
	mov	[ebp-8],ebx
	jmp	_18
_19
	call	_fmousey
	mov	ebx,[ebp-8]
	add	ebx,22
	cmp	eax,ebx
	setl	al
	movzx	eax,al
	mov	[ebp-12],eax
	mov	[ebp-16],eax
	mov	eax,ebx
	call	_fmousey
	mov	ebx,eax
	mov	eax,[ebp-16]
	cmp	ebx,[ebp-8]
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-12]
	and	ebx,eax
	and	ebx,ebx
	jz	_20
	sub	esp,4
	mov	[esp],1
	call	_fmousehit
	and	eax,eax
	jz	_21
	cmp	[ebp+52],0
	setz	al
	movzx	eax,al
	cmp	eax,0
	jnz	_22
	sub	esp,4
	mov	eax,[ebp+52]
	mov	[esp],eax
	call	_fplaysound
_22
	mov	eax,[ebp-8]
	sub	eax,[ebp+32]
	sub	eax,20
	mov	ecx,22
	cdq
	idiv	ecx
	add	eax,1
	mov	[ebp-4],eax
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_amenuid]
	mov	[esi],ebx
	jmp	_4
_21
	sub	esp,12
	mov	[esp+4],36
	mov	[esp+8],106
	mov	[esp],10
	call	_fcolor
	sub	esp,20
	mov	[esp+12],22
	mov	[esp+16],1
	mov	esi,[ebp+44]
	sub	esi,2
	mov	[esp+8],esi
	mov	ebx,[ebp-8]
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	add	eax,2
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],189
	mov	[esp+8],210
	mov	[esp],182
	call	_fcolor
	sub	esp,20
	mov	[esp+12],20
	mov	[esp+16],1
	mov	esi,[ebp+44]
	sub	esi,4
	mov	[esp+8],esi
	mov	ebx,[ebp-8]
	add	ebx,1
	mov	[esp+4],ebx
	mov	eax,[ebp+28]
	add	eax,3
	mov	[esp],eax
	call	_frect
_20
	cmp	[ebp+56],0
	setz	al
	movzx	eax,al
	cmp	eax,0
	jnz	_23
	sub	esp,16
	mov	eax,[ebp-8]
	sub	eax,[ebp+32]
	sub	eax,20
	mov	ecx,22
	cdq
	idiv	ecx
	mov	[esp+12],eax
	mov	ebx,[ebp-8]
	add	ebx,2
	mov	[esp+8],ebx
	mov	esi,[ebp+28]
	add	esi,4
	mov	[esp+4],esi
	mov	eax,[ebp+56]
	mov	[esp],eax
	call	_fdrawimage
_23
	add	[ebp-8],22
_18
	mov	ebx,[ebp+36]
	imul	ebx,22
	add	ebx,[ebp+32]
	cmp	[ebp-8],ebx
	jle	_19
_4
_17
	call	_fflushmouse
	mov	ebx,[ebp+32]
	add	ebx,20
	mov	[ebp-8],ebx
	jmp	_24
_25
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,28
	mov	eax,[ebp-8]
	sub	eax,[ebp+32]
	sub	eax,20
	mov	ecx,22
	cdq
	idiv	ecx
	add	eax,1
	mov	[esp+4],eax
	mov	[ebp-12],eax
	sub	esp,4
	lea	ebx,[ebp+40]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	_fmenuitemtext
	mov	ebx,eax
	mov	[esp+8],ebx
	mov	[esp+12],0
	mov	[esp+16],1
	mov	esi,[ebp-8]
	add	esi,11
	mov	[esp+4],esi
	mov	eax,[ebp+28]
	add	eax,32
	mov	[esp],eax
	call	_ftext
	cmp	[ebp+56],0
	setz	al
	movzx	eax,al
	cmp	eax,0
	jnz	_26
	sub	esp,16
	mov	eax,[ebp-8]
	sub	eax,[ebp+32]
	sub	eax,20
	mov	ecx,22
	cdq
	idiv	ecx
	mov	[esp+12],eax
	mov	ebx,[ebp-8]
	add	ebx,2
	mov	[esp+8],ebx
	mov	esi,[ebp+28]
	add	esi,4
	mov	[esp+4],esi
	mov	eax,[ebp+56]
	mov	[esp],eax
	call	_fdrawimage
_26
	add	[ebp-8],22
_24
	mov	ebx,[ebp+36]
	imul	ebx,22
	add	ebx,[ebp+32]
	cmp	[ebp-8],ebx
	jle	_25
_5
	jmp	_27
_16
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],1
	sub	esp,4
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	ebx,[ebp+32]
	add	ebx,9
	mov	[esp+4],ebx
	sub	esp,8
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	sar	eax,byte 1
	add	eax,[ebp+28]
	add	eax,5
	mov	[esp],eax
	call	_ftext
_27
	mov	eax,[ebp-4]
	jmp	_3_leave
	mov	eax,0
	jmp	_3_leave
_3_leave
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,[ebp+24]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[ebp-12],eax
	sub	esp,4
	mov	esi,[ebp+40]
	mov	[esp],esi
	mov	eax,esi
	call	__bbStrRelease
	mov	esi,eax
	mov	eax,[ebp-12]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 40
	.align	16
_fmenuitemtext
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,16
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	jmp	_29
_28
	sub	esp,16
	mov	eax,_30
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	ebx,[ebp-4]
	add	ebx,1
	mov	[esp+8],ebx
	mov	[ebp-16],eax
	sub	esp,4
	lea	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	_finstr
	mov	ebx,eax
	mov	[ebp-4],ebx
	add	[ebp-12],1
_29
	mov	eax,[ebp+24]
	sub	eax,1
	cmp	[ebp-12],eax
	setz	al
	movzx	eax,al
	cmp	eax,0
	jz	_28
_7
	sub	esp,16
	mov	eax,_31
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	ebx,[ebp-4]
	add	ebx,1
	mov	[esp+8],ebx
	mov	[ebp-16],eax
	sub	esp,4
	lea	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	_finstr
	mov	ebx,eax
	mov	[ebp-8],ebx
	sub	esp,12
	mov	ebx,[ebp-4]
	add	ebx,1
	mov	[esp+4],ebx
	mov	esi,[ebp-8]
	sub	esi,[ebp-4]
	sub	esi,1
	mov	[esp+8],esi
	sub	esp,4
	lea	eax,[ebp+20]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fmid
	jmp	_6_leave
	sub	esp,4
	mov	eax,_32
	mov	[esp],eax
	call	__bbStrConst
	jmp	_6_leave
_6_leave
	mov	[ebp-16],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 8
	.align	4
_amenuid	.dd	0
	.dd	1
	.dd	1
	.dd	0
_30	.db	";",0
_31	.db	";",0
_32	.db	"",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	0

