
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,24
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[_vscreenwide],800
	mov	[_vscreenhigh],600
	mov	[_vdivisor],40
	mov	ebx,[_vscreenwide]
	sar	ebx,byte 1
	mov	[_vorigin_x],ebx
	mov	ebx,[_vscreenhigh]
	sar	ebx,byte 1
	mov	[_vorigin_y],ebx
	sub	esp,16
	mov	[esp+8],0
	mov	[esp+12],0
	mov	esi,[_vscreenhigh]
	mov	[esp+4],esi
	mov	eax,[_vscreenwide]
	mov	[esp],eax
	call	_fgraphics
	sub	esp,4
	call	_fbackbuffer
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,8
	mov	eax,[_vorigin_x]
	mov	[esp],eax
	mov	ebx,[_vorigin_y]
	mov	[esp+4],ebx
	call	_forigin
	sub	esp,8
	mov	eax,[_vorigin_x]
	mov	[esp],eax
	mov	ebx,[_vorigin_y]
	mov	[esp+4],ebx
	call	_fmovemouse
	call	_fhidepointer
	jmp	_9
_8
	call	_fcls
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_10
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_11
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,20
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_12
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,60
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_13
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,80
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_14
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,100
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_15
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,150
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_16
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,170
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_17
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[_vorigin_y]
	neg	ebx
	add	ebx,210
	mov	[esp+4],ebx
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_ftext
	call	_fdrawnumberlinex
	call	_fdrawnumberliney
	call	_fmousey
	sub	eax,[_vorigin_y]
	mov	[ebp-4],eax
	call	_fmousex
	sub	eax,[_vorigin_x]
	mov	[ebp-8],eax
	sub	esp,12
	mov	[esp+4],100
	mov	[esp+8],100
	mov	[esp],255
	call	_fcolor
	sub	esp,16
	mov	ebx,[_vorigin_x]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	esi,[ebp-4]
	mov	[esp+12],esi
	mov	esi,[ebp-4]
	mov	[esp+4],esi
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_fline
	sub	esp,16
	mov	ebx,[ebp-8]
	mov	[esp+8],ebx
	mov	esi,[_vorigin_y]
	mov	[esp+12],esi
	mov	esi,[_vorigin_y]
	neg	esi
	mov	[esp+4],esi
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_fline
	mov	ebx,[ebp-8]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[_vdivisor]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-12],ebx
	sub	esp,12
	mov	[esp+4],100
	mov	[esp+8],0
	mov	[esp],100
	call	_fcolor
	sub	esp,32
	mov	eax,_18
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	mov	[esp+4],ebx
	mov	[esp],-225
	call	_ftext
	sub	esp,32
	mov	eax,_19
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	_fceil
	mov	ebx,eax
	mov	eax,[ebp-24]
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	add	ebx,20
	mov	[esp+4],ebx
	mov	[esp],-225
	call	_ftext
	sub	esp,32
	mov	eax,_20
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	_ffloor
	mov	ebx,eax
	mov	eax,[ebp-24]
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	add	ebx,40
	mov	[esp+4],ebx
	mov	[esp],-225
	call	_ftext
	sub	esp,32
	mov	eax,_21
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	push	ebx
	fld	[esp]
	pop	ebx
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	add	ebx,60
	mov	[esp+4],ebx
	mov	[esp],-225
	call	_ftext
	mov	ebx,[ebp-4]
	neg	ebx
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[_vdivisor]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-16],ebx
	sub	esp,12
	mov	[esp+4],100
	mov	[esp+8],0
	mov	[esp],100
	call	_fcolor
	sub	esp,32
	mov	eax,_22
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	mov	[esp+4],ebx
	mov	eax,[_vdivisor]
	shl	eax,byte 1
	mov	[esp],eax
	call	_ftext
	sub	esp,32
	mov	eax,_23
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	_fceil
	mov	ebx,eax
	mov	eax,[ebp-24]
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	add	ebx,20
	mov	[esp+4],ebx
	mov	eax,[_vdivisor]
	shl	eax,byte 1
	mov	[esp],eax
	call	_ftext
	sub	esp,32
	mov	eax,_24
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	_ffloor
	mov	ebx,eax
	mov	eax,[ebp-24]
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	add	ebx,40
	mov	[esp+4],ebx
	mov	eax,[_vdivisor]
	shl	eax,byte 1
	mov	[esp],eax
	call	_ftext
	sub	esp,32
	mov	eax,_25
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,[ebp-16]
	push	ebx
	fld	[esp]
	pop	ebx
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[_vdivisor]
	shl	ebx,byte 1
	add	ebx,60
	mov	[esp+4],ebx
	mov	eax,[_vdivisor]
	shl	eax,byte 1
	mov	[esp],eax
	call	_ftext
	sub	esp,4
	mov	[esp],1
	call	_fflip
_9
	call	_fgetkey
	cmp	eax,0
	jz	_8
_3
	call	_fend
	ret
_2_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fdrawnumberlinex
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	sub	esp,12
	mov	[esp+4],200
	mov	[esp+8],200
	mov	[esp],200
	call	_fcolor
	sub	esp,16
	mov	ebx,[_vorigin_x]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	[esp+12],-1
	mov	[esp+4],-1
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_fline
	sub	esp,16
	mov	ebx,[_vorigin_x]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	[esp+12],0
	mov	[esp+4],0
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_fline
	sub	esp,16
	mov	ebx,[_vorigin_x]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	[esp+12],1
	mov	[esp+4],1
	mov	eax,[_vorigin_x]
	neg	eax
	mov	[esp],eax
	call	_fline
	mov	[ebp-4],-9
	jmp	_26
_27
	mov	ebx,[_vdivisor]
	neg	ebx
	imul	ebx,[ebp-4]
	mov	[ebp-8],ebx
	sub	esp,16
	mov	ebx,[ebp-8]
	mov	[esp+8],ebx
	mov	[esp+12],4
	mov	[esp+4],-4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_fline
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	cmp	[ebp-4],0
	jz	_28
	sub	esp,32
	mov	eax,[ebp-4]
	neg	eax
	mov	[esp],eax
	call	__bbStrFromInt
	mov	[esp],eax
	mov	[esp+4],2
	call	_frset
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],-20
	mov	eax,[ebp-8]
	sub	eax,10
	mov	[esp],eax
	call	_ftext
_28
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbAbs
	cmp	eax,9
	jnz	_29
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_30
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	[esp+4],20
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_ftext
_29
	add	[ebp-4],1
_26
	cmp	[ebp-4],9
	jle	_27
_5
	mov	eax,0
	jmp	_4_leave
_4_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fdrawnumberliney
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	sub	esp,12
	mov	[esp+4],200
	mov	[esp+8],200
	mov	[esp],200
	call	_fcolor
	sub	esp,16
	mov	[esp+8],-1
	mov	esi,[_vorigin_y]
	sub	esi,1
	mov	[esp+12],esi
	mov	esi,[_vorigin_y]
	neg	esi
	mov	[esp+4],esi
	mov	[esp],-1
	call	_fline
	sub	esp,16
	mov	[esp+8],0
	mov	esi,[_vorigin_y]
	sub	esi,1
	mov	[esp+12],esi
	mov	esi,[_vorigin_y]
	neg	esi
	mov	[esp+4],esi
	mov	[esp],0
	call	_fline
	sub	esp,16
	mov	[esp+8],1
	mov	esi,[_vorigin_y]
	sub	esi,1
	mov	[esp+12],esi
	mov	esi,[_vorigin_y]
	neg	esi
	mov	[esp+4],esi
	mov	[esp],1
	call	_fline
	mov	[ebp-4],-7
	jmp	_31
_32
	mov	ebx,[_vdivisor]
	neg	ebx
	imul	ebx,[ebp-4]
	mov	[ebp-8],ebx
	sub	esp,16
	mov	[esp+8],4
	mov	esi,[ebp-8]
	mov	[esp+12],esi
	mov	esi,[ebp-8]
	mov	[esp+4],esi
	mov	[esp],-4
	call	_fline
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	cmp	[ebp-4],0
	jz	_33
	sub	esp,32
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbStrFromInt
	mov	[esp],eax
	mov	[esp+4],2
	call	_frset
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	ebx,[ebp-8]
	sub	ebx,6
	mov	[esp+4],ebx
	mov	[esp],-30
	call	_ftext
_33
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbAbs
	cmp	eax,7
	jnz	_34
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	sub	esp,4
	mov	eax,_35
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	ebx,[ebp-8]
	sub	ebx,6
	mov	[esp+4],ebx
	mov	[esp],20
	call	_ftext
_34
	add	[ebp-4],1
_31
	cmp	[ebp-4],7
	jle	_32
_7
	mov	eax,0
	jmp	_6_leave
_6_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	4
_vscreenwide	.dd	0
	.align	4
_vscreenhigh	.dd	0
	.align	4
_vdivisor	.dd	0
	.align	4
_vorigin_x	.dd	0
	.align	4
_vorigin_y	.dd	0
_10	.db	"         Blitz3D ROUNDING Example",0
_11	.db	"Demonstrates Functions CEIL, FLOOR and INT",0
_12	.db	" CEIL rounds up to the next whole number",0
_13	.db	"FLOOR rounds down to the next whole number",0
_14	.db	"  INT rounds to the closest whole number",0
_15	.db	"Move mouse around to check different values",0
_16	.db	"of X and Y on the coordinate system.",0
_17	.db	"Press any key to exit.",0
_18	.db	" X = ",0
_19	.db	" Ceil( x ) = ",0
_20	.db	" Floor( x ) = ",0
_21	.db	" Int( x ) = ",0
_22	.db	" Y = ",0
_23	.db	" Ceil( y ) = ",0
_24	.db	" Floor( y ) = ",0
_25	.db	" Int( y ) = ",0
_30	.db	"X",0
_35	.db	"Y",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	0

