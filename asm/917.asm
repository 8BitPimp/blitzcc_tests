
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,12
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	sub	esp,4
	mov	eax,_acosine
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,360
	mov	esi,_acosine
	add	esi,12
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_acosine
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	eax,_asine
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,360
	mov	esi,_asine
	add	esi,12
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_asine
	mov	[esp],eax
	call	__bbDimArray
	mov	[ebp-4],0
	jmp	_48
_49
	sub	esp,4
	mov	eax,[ebp-4]
	push	eax
	fild	[esp]
	pop	eax
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp-4]
	shl	ebx,byte 2
	add	ebx,[_acosine]
	mov	[ebx],eax
	sub	esp,4
	mov	eax,[ebp-4]
	push	eax
	fild	[esp]
	pop	eax
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp],eax
	call	_fsin
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp-4]
	shl	ebx,byte 2
	add	ebx,[_asine]
	mov	[ebx],eax
	add	[ebp-4],1
_48
	cmp	[ebp-4],360
	jle	_49
_3
	sub	esp,4
	mov	eax,_aquad
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,2000
	mov	esi,_aquad
	add	esi,12
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_aquad
	mov	[esp],eax
	call	__bbDimArray
	mov	[ebp-4],0
	jmp	_50
_51
	sub	esp,8
	mov	eax,[ebp-4]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	[esp],eax
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,_tquadobj
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,1
	mov	esi,[ebp-4]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,112
	mov	[esi],ebx
	sub	esp,8
	lea	eax,[ebp-8]
	mov	[esp],eax
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,_temptyquadlist
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp-4]
	mov	esi,[ebp-8]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	add	[ebp-4],1
_50
	cmp	[ebp-4],2000
	jle	_51
_4
	ret
_2_leave
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,[ebp-8]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_finitialquadposition
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+24]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	[ebx],esi
	mov	ebx,[ebp+28]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,12
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	[esi],ebx
	sub	esp,16
	mov	[esp+8],0
	mov	esi,[ebp+36]
	mov	[esp+12],esi
	mov	[esp+4],0
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fmovequad
	mov	eax,0
	jmp	_5_leave
_5_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 20
	.align	16
_fmovequad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	eax,[ebp+24]
	mov	[esp],eax
	mov	[esp+4],360
	call	__bbMod
	mov	[ebp+24],eax
	cmp	[ebp+24],0
	jge	_60
	add	[ebp+24],360
_60
	cmp	[ebp+24],360
	jle	_61
	sub	[ebp+24],360
_61
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+24]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	[ebx],esi
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+24]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	[ebx],esi
	cmp	[ebp+32],0
	jz	_62
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+32]
	mov	[esp],eax
	call	_fterrainy
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	[ebx],eax
_62
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,32
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,40
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,56
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,60
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,64
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,84
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	[esi],ebx
	mov	eax,0
	jmp	_6_leave
_6_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 16
	.align	16
_fliftquad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,4
	mov	[ebp-4],0
	sub	esp,16
	mov	[esp+8],0
	mov	esi,[ebp+28]
	mov	[esp+12],esi
	mov	[esp+4],0
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fmovequad
	mov	ebx,[ebp+24]
	mov	[ebp-4],ebx
	sub	esp,12
	mov	ebx,[ebp+28]
	mov	[esp+4],ebx
	mov	esi,[ebp-4]
	mov	[esp+8],esi
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fconformquadtoterrain
	mov	eax,0
	jmp	_7_leave
_7_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fpointquadtocamera
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,4
	mov	[ebp-4],0
	cmp	[ebp+36],1
	jnz	_63
	mov	ebx,[ebp+24]
	mov	[ebp-4],ebx
_63
	cmp	[ebp+36],2
	jnz	_64
	sub	esp,8
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,16
	mov	eax,[eax]
	push	eax
	fld	[esp]
	pop	eax
	mov	ebx,[ebp+32]
	push	ebx
	fld	[esp]
	pop	ebx
	fsubp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp],eax
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+28]
	push	esi
	fld	[esp]
	pop	esi
	fsubp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp+4],ebx
	call	_fatan2
	mov	ebx,1119092736
	push	ebx
	fld	[esp]
	pop	ebx
	fsubp	st(1)
	push	eax
	fistp	[esp]
	pop	eax
	mov	[ebp-4],eax
_64
	sub	esp,8
	mov	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],360
	call	__bbMod
	mov	[ebp-4],eax
	cmp	[ebp-4],0
	jge	_65
	add	[ebp-4],360
_65
	cmp	[ebp-4],360
	jle	_66
	sub	[ebp-4],360
_66
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,56
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,64
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,80
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,88
	mov	[ebx],esi
	mov	ebx,[ebp-4]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	[esi],ebx
	mov	eax,0
	jmp	_8_leave
_8_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 20
	.align	16
_fpointandcentre
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,16
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	ebx,[ebp+24]
	mov	[ebp-4],ebx
	sub	esp,8
	mov	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],360
	call	__bbMod
	mov	[ebp-4],eax
	cmp	[ebp-4],0
	jge	_67
	add	[ebp-4],360
_67
	cmp	[ebp-4],360
	jle	_68
	sub	[ebp-4],360
_68
	mov	ebx,[ebp-4]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-8],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-12],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-16],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,32
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,56
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,80
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,40
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,64
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,88
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-16]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-16]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,36
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-16]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,60
	mov	[ebx],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-16]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,84
	mov	[ebx],esi
	mov	eax,0
	jmp	_9_leave
_9_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 8
	.align	16
_fpositionquad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,20
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	mov	[esp+12],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	esi,[esi]
	mov	[esp+16],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	esi,[esi]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,4
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	sub	esp,20
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,36
	mov	ebx,[ebx]
	mov	[esp+12],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,40
	mov	esi,[esi]
	mov	[esp+16],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,32
	mov	esi,[esi]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,28
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	sub	esp,20
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,60
	mov	ebx,[ebx]
	mov	[esp+12],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,64
	mov	esi,[esi]
	mov	[esp+16],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,56
	mov	esi,[esi]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,52
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	sub	esp,20
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,84
	mov	ebx,[ebx]
	mov	[esp+12],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	esi,[esi]
	mov	[esp+16],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	esi,[esi]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,76
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	mov	eax,0
	jmp	_10_leave
_10_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fpositionquadcentred
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,60
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	mov	[ebp-36],ebx
	mov	[ebp-40],ebx
	mov	[ebp-44],ebx
	mov	[ebp-48],ebx
	mov	[ebp-52],ebx
	mov	[ebp-56],ebx
	mov	[ebp-60],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-4],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-8],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-12],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-4]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-16],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-4]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-20],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-4]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-24],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_acosine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-4]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-28],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-32],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-36],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-40],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-44],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-48],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	fsubrp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-52],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-56],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_asine]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-8]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[ebp-60],esi
	sub	esp,20
	mov	ebx,[ebp-32]
	mov	[esp+12],ebx
	mov	esi,[ebp-48]
	mov	[esp+16],esi
	mov	esi,[ebp-16]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,4
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	sub	esp,20
	mov	ebx,[ebp-36]
	mov	[esp+12],ebx
	mov	esi,[ebp-52]
	mov	[esp+16],esi
	mov	esi,[ebp-20]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,28
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	sub	esp,20
	mov	ebx,[ebp-40]
	mov	[esp+12],ebx
	mov	esi,[ebp-56]
	mov	[esp+16],esi
	mov	esi,[ebp-24]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,52
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	sub	esp,20
	mov	ebx,[ebp-44]
	mov	[esp+12],ebx
	mov	esi,[ebp-60]
	mov	[esp+16],esi
	mov	esi,[ebp-28]
	mov	[esp+8],esi
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,76
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertexcoords
	mov	eax,0
	jmp	_11_leave
_11_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fchangequadtexture
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+24]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,20
	mov	[esi],ebx
	mov	ebx,[ebp+36]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,24
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,44
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,48
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,68
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,72
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,92
	mov	[esi],ebx
	mov	ebx,[ebp+36]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,96
	mov	[esi],ebx
	sub	esp,24
	mov	[esp+16],1065353216
	mov	[esp+20],0
	mov	esi,[ebp+36]
	mov	[esp+12],esi
	mov	ebx,[ebp+24]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,4
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertextexcoords
	sub	esp,24
	mov	[esp+16],1065353216
	mov	[esp+20],0
	mov	esi,[ebp+28]
	mov	[esp+12],esi
	mov	ebx,[ebp+24]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,28
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertextexcoords
	sub	esp,24
	mov	[esp+16],1065353216
	mov	[esp+20],0
	mov	esi,[ebp+28]
	mov	[esp+12],esi
	mov	ebx,[ebp+32]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,52
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertextexcoords
	sub	esp,24
	mov	[esp+16],1065353216
	mov	[esp+20],0
	mov	esi,[ebp+36]
	mov	[esp+12],esi
	mov	ebx,[ebp+32]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,76
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	call	_fvertextexcoords
	mov	eax,0
	jmp	_12_leave
_12_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 20
	.align	16
_fconformquadtoterrain
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,40
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,64
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,12
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,60
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,84
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,32
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,56
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	[esi],ebx
	cmp	[ebp+24],0
	jz	_69
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fterrainy
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	faddp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	[ebx],eax
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,36
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,40
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,32
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fterrainy
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	faddp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,36
	mov	[ebx],eax
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,60
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,64
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,56
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fterrainy
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	faddp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,60
	mov	[ebx],eax
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,84
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fterrainy
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	faddp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,84
	mov	[ebx],eax
_69
	mov	eax,0
	jmp	_13_leave
_13_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fdoesquadhavesurface
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	cmp	ebx,0
	jz	_70
	mov	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_aquad]
	mov	eax,[eax]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	jmp	_14_leave
	jmp	_71
_70
	mov	eax,0
	jmp	_14_leave
_71
	mov	eax,0
	jmp	_14_leave
_14_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fremovequadslow
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,4
	mov	[ebp-4],0
	mov	ebx,1
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,112
	mov	[esi],ebx
	mov	[ebp-4],0
	jmp	_72
_73
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,112
	mov	ebx,[ebx]
	cmp	ebx,0
	jnz	_74
_74
	add	[ebp-4],1
_72
	cmp	[ebp-4],2000
	jle	_73
_16
	mov	eax,0
	jmp	_15_leave
_15_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fremovequadcheat
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+8],0
	mov	[esp+4],0
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fchangequadtexture
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	[esi],ebx
	sub	esp,16
	mov	[esp+8],0
	mov	[esp+12],0
	mov	[esp+4],0
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fmovequad
	sub	esp,4
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fpositionquad
	mov	ebx,1
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,112
	mov	[esi],ebx
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tsurfacedquad
	call	__bbObjEachFirst
	and	eax,eax
	jz	_18
_75
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	cmp	ebx,[ebp+20]
	jnz	_76
	mov	ebx,1
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	jmp	_18
_76
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_75
_18
	mov	eax,0
	jmp	_17_leave
_17_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fquadisblank
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,112
	mov	ebx,[ebx]
	cmp	ebx,1
	jnz	_77
	mov	eax,1
	jmp	_19_leave
	jmp	_78
_77
	mov	eax,0
	jmp	_19_leave
_78
	mov	eax,0
	jmp	_19_leave
_19_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fscalequad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,100
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+24]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,104
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+28]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,60
	mov	[esi],ebx
	mov	eax,0
	jmp	_20_leave
_20_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fresetquad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	mov	ebx,[ebp+24]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	[esi],ebx
	sub	esp,20
	mov	[esp+12],1065353216
	mov	[esp+16],1065353216
	mov	[esp+8],0
	mov	[esp+4],0
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fchangequadtexture
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,112
	mov	[esi],ebx
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tsurfacedquad
	call	__bbObjEachFirst
	and	eax,eax
	jz	_22
_79
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	cmp	ebx,[ebp+20]
	jnz	_80
	mov	ebx,0
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	jmp	_22
_80
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_79
_22
	mov	eax,0
	jmp	_21_leave
_21_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fcreatequad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,12
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,112
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,108
	mov	[esi],ebx
	sub	esp,28
	mov	[esp+20],1065353216
	mov	[esp+24],1065353216
	mov	[esp+16],0
	mov	[esp+12],0
	mov	[esp+8],0
	mov	[esp+4],0
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_faddvertex
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,4
	mov	[ebx],eax
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	fchs
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	push	ebx
	fld	[esp]
	pop	ebx
	fchs
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,12
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,16
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,20
	mov	[esi],ebx
	mov	ebx,1065353216
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,24
	mov	[esi],ebx
	sub	esp,28
	mov	[esp+20],0
	mov	[esp+24],1065353216
	mov	[esp+16],0
	mov	[esp+12],0
	mov	esi,[ebp+32]
	mov	[esp+8],esi
	mov	[esp+4],0
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_faddvertex
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,28
	mov	[ebx],eax
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	fchs
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,32
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,40
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,44
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,48
	mov	[esi],ebx
	sub	esp,28
	mov	[esp+20],0
	mov	[esp+24],1065353216
	mov	[esp+16],1065353216
	mov	[esp+12],0
	mov	esi,[ebp+32]
	mov	[esp+8],esi
	mov	ebx,[ebp+28]
	mov	[esp+4],ebx
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_faddvertex
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,52
	mov	[ebx],eax
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,56
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,60
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,64
	mov	[esi],ebx
	mov	ebx,1065353216
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,68
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,72
	mov	[esi],ebx
	sub	esp,28
	mov	[esp+20],1065353216
	mov	[esp+24],1065353216
	mov	[esp+16],1065353216
	mov	[esp+12],0
	mov	[esp+8],0
	mov	ebx,[ebp+28]
	mov	[esp+4],ebx
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_faddvertex
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,76
	mov	[ebx],eax
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,80
	mov	[esi],ebx
	mov	ebx,[ebp+32]
	push	ebx
	fld	[esp]
	pop	ebx
	fchs
	mov	esi,1056964608
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,84
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,88
	mov	[esi],ebx
	mov	ebx,1065353216
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,92
	mov	[esi],ebx
	mov	ebx,1065353216
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,96
	mov	[esi],ebx
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,28
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,52
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,4
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_faddtriangle
	sub	esp,16
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,52
	mov	ebx,[ebx]
	mov	[esp+8],ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,76
	mov	esi,[esi]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,4
	mov	esi,[esi]
	mov	[esp+4],esi
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_faddtriangle
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_temptyquadlist
	call	__bbObjEachFirst
	and	eax,eax
	jz	_24
_81
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	cmp	[ebp+20],ebx
	jnz	_82
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjDelete
	jmp	_24
_82
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_81
_24
	sub	esp,8
	lea	eax,[ebp-8]
	mov	[esp],eax
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,_tsurfacedquad
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp+20]
	mov	esi,[ebp-8]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	mov	esi,[ebp-8]
	mov	esi,[esi]
	add	esi,4
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp-8]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	mov	eax,0
	jmp	_23_leave
_23_leave
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[ebp-12],eax
	sub	esp,4
	mov	esi,[ebp-8]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-12]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 16
	.align	16
_fnextquad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_temptyquadlist
	call	__bbObjEachFirst
	and	eax,eax
	jz	_26
_83
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	jmp	_25_leave
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_83
_26
	mov	eax,-1
	jmp	_25_leave
	mov	eax,-1
	jmp	_25_leave
	mov	eax,0
	jmp	_25_leave
_25_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fnextquadwithmysurface
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tsurfacedquad
	call	__bbObjEachFirst
	and	eax,eax
	jz	_28
_84
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,4
	mov	eax,[eax]
	cmp	eax,[ebp+20]
	setz	al
	movzx	eax,al
	mov	[ebp-8],eax
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	cmp	ebx,1
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-8]
	and	eax,ebx
	and	eax,eax
	jz	_85
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	jmp	_27_leave
_85
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_84
_28
	mov	eax,-1
	jmp	_27_leave
	mov	eax,0
	jmp	_27_leave
_27_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fcountusedquads
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-4],0
	mov	[ebp-8],0
	jmp	_86
_87
	mov	ebx,[ebp-8]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	cmp	ebx,0
	jz	_88
	add	[ebp-4],1
_88
	add	[ebp-8],1
_86
	cmp	[ebp-8],2000
	jle	_87
_30
	mov	eax,[ebp-4]
	jmp	_29_leave
	mov	eax,0
	jmp	_29_leave
_29_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fremoveunusedsurface
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,20
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-4],1
	sub	esp,8
	lea	eax,[ebp-8]
	mov	[esp],eax
	mov	[esp+4],_tsurfacedquad
	call	__bbObjEachFirst
	and	eax,eax
	jz	_32
_89
	mov	eax,[ebp-8]
	mov	eax,[eax]
	add	eax,4
	mov	eax,[eax]
	cmp	eax,[ebp+20]
	setz	al
	movzx	eax,al
	mov	[ebp-20],eax
	mov	ebx,[ebp-8]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-20]
	and	eax,ebx
	and	eax,eax
	jz	_90
	mov	[ebp-4],0
	jmp	_32
_90
	sub	esp,4
	lea	eax,[ebp-8]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_89
_32
	cmp	[ebp-4],1
	jnz	_91
	sub	esp,8
	lea	eax,[ebp-12]
	mov	[esp],eax
	mov	[esp+4],_tquadrangeobj
	call	__bbObjEachFirst
	and	eax,eax
	jz	_33
_92
	mov	ebx,[ebp-12]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	cmp	ebx,[ebp+20]
	jnz	_93
	sub	esp,4
	mov	eax,[ebp-12]
	mov	[esp],eax
	call	__bbObjDelete
_93
	sub	esp,4
	lea	eax,[ebp-12]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_92
_33
	sub	esp,8
	lea	eax,[ebp-8]
	mov	[esp],eax
	mov	[esp+4],_tsurfacedquad
	call	__bbObjEachFirst
	and	eax,eax
	jz	_34
_94
	mov	ebx,[ebp-8]
	mov	ebx,[ebx]
	add	ebx,4
	mov	ebx,[ebx]
	cmp	ebx,[ebp+20]
	jnz	_95
	mov	ebx,0
	mov	esi,[ebp-8]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	mov	ebx,1
	mov	esi,[ebp-8]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,112
	mov	[esi],ebx
	sub	esp,8
	lea	eax,[ebp-16]
	mov	[esp],eax
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,_temptyquadlist
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp-8]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	mov	esi,[ebp-16]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	__bbObjDelete
_95
	sub	esp,4
	lea	eax,[ebp-8]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_94
_34
	sub	esp,12
	mov	[esp+4],1
	mov	[esp+8],1
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fclearsurface
_91
	mov	eax,0
	jmp	_31_leave
_31_leave
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[ebp-20],eax
	sub	esp,4
	mov	esi,[ebp-16]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-20]
	mov	[ebp-20],eax
	sub	esp,4
	mov	esi,[ebp-8]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-20]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fanimatequad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,24
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	ebx,[ebp+24]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[ebp+32]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-4],ebx
	mov	ebx,[ebp+28]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[ebp+36]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-8],ebx
	mov	eax,[ebp+32]
	mov	ecx,[ebp+24]
	cdq
	idiv	ecx
	mov	[ebp-12],eax
	mov	eax,[ebp+36]
	mov	ecx,[ebp+28]
	cdq
	idiv	ecx
	mov	[ebp-16],eax
	sub	esp,8
	mov	eax,[ebp+40]
	mov	[esp],eax
	mov	ebx,[ebp-12]
	mov	[esp+4],ebx
	call	__bbMod
	mov	[ebp-20],eax
	mov	eax,[ebp+40]
	sub	eax,[ebp-20]
	mov	ecx,[ebp-16]
	cdq
	idiv	ecx
	add	eax,1
	mov	[ebp-24],eax
	cmp	[ebp-20],0
	jnz	_96
	mov	ebx,[ebp-12]
	mov	[ebp-20],ebx
_96
	mov	ebx,[ebp-16]
	cmp	[ebp-24],ebx
	jle	_97
	mov	eax,-1
	jmp	_35_leave
_97
	sub	esp,20
	mov	ebx,[ebp-20]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp+12],ebx
	mov	esi,[ebp-24]
	push	esi
	fild	[esp]
	pop	esi
	mov	edi,[ebp-8]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[esp+16],esi
	mov	esi,[ebp-24]
	sub	esi,1
	push	esi
	fild	[esp]
	pop	esi
	mov	edi,[ebp-8]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	[esp+8],esi
	mov	ebx,[ebp-20]
	sub	ebx,1
	push	ebx
	fild	[esp]
	pop	ebx
	mov	edi,[ebp-4]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp+4],ebx
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fchangequadtexture
	mov	eax,0
	jmp	_35_leave
_35_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 24
	.align	16
_fresizequad
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,[ebp+24]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,100
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,104
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+28]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,36
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_aquad]
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+28]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_aquad]
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,60
	mov	[esi],ebx
	mov	eax,0
	jmp	_36_leave
_36_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fmylowerrange
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tquadrangeobj
	call	__bbObjEachFirst
	and	eax,eax
	jz	_38
_98
	sub	esp,12
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-8],eax
	sub	esp,4
	lea	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jnz	_99
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,4
	mov	eax,[eax]
	jmp	_37_leave
_99
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_98
_38
	mov	eax,-1
	jmp	_37_leave
	mov	eax,0
	jmp	_37_leave
_37_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[ebp-8],eax
	sub	esp,4
	mov	esi,[ebp-4]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fmyupperrange
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tquadrangeobj
	call	__bbObjEachFirst
	and	eax,eax
	jz	_40
_100
	sub	esp,12
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-8],eax
	sub	esp,4
	lea	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jnz	_101
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,8
	mov	eax,[eax]
	jmp	_39_leave
_101
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_100
_40
	mov	eax,-1
	jmp	_39_leave
	mov	eax,0
	jmp	_39_leave
_39_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[ebp-8],eax
	sub	esp,4
	mov	esi,[ebp-4]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_funassignquadrange
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,12
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tquadrangeobj
	call	__bbObjEachFirst
	and	eax,eax
	jz	_42
_102
	sub	esp,12
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-12],eax
	sub	esp,4
	lea	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jnz	_103
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,4
	mov	ebx,[ebx]
	mov	[ebp-8],ebx
	jmp	_104
_105
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_fdoesquadhavesurface
	cmp	eax,0
	jz	_106
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_fremovequadcheat
_106
	add	[ebp-8],1
_104
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	cmp	[ebp-8],ebx
	jle	_105
_43
	mov	ebx,0
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,16
	mov	[esi],ebx
	jmp	_42
_103
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_102
_42
	mov	eax,0
	jmp	_41_leave
_41_leave
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[ebp-12],eax
	sub	esp,4
	mov	esi,[ebp-4]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-12]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fassignquadrange
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,28
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	sub	esp,12
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,_108
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp+20],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	or	ebx,eax
	and	ebx,ebx
	jz	_107
	sub	esp,4
	mov	eax,_109
	mov	[esp],eax
	call	__bbStrConst
	jmp	_44_leave
_107
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tquadrangeobj
	call	__bbObjEachFirst
	and	eax,eax
	jz	_45
_110
	sub	esp,12
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-28],eax
	sub	esp,4
	lea	ebx,[ebp+24]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jnz	_111
	sub	esp,4
	mov	eax,_112
	mov	[esp],eax
	call	__bbStrConst
	jmp	_44_leave
	jmp	_45
_111
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_110
_45
	mov	[ebp-8],-1
	mov	[ebp-12],0
	mov	[ebp-16],0
	jmp	_113
_114
	mov	[ebp-20],0
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tquadrangeobj
	call	__bbObjEachFirst
	and	eax,eax
	jz	_47
_115
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,4
	mov	eax,[eax]
	cmp	[ebp-16],eax
	setge	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	cmp	[ebp-16],ebx
	mov	eax,ebx
	setle	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_116
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,12
	mov	eax,[eax]
	cmp	eax,[ebp+28]
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	cmp	ebx,1
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	mov	[ebp-28],eax
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	cmp	ebx,[ebp+28]
	mov	eax,ebx
	setnz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	or	ebx,eax
	and	ebx,ebx
	jz	_117
	mov	[ebp-20],1
_117
_116
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_115
_47
	cmp	[ebp-20],0
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-8],-1
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_118
	mov	ebx,[ebp-16]
	mov	[ebp-8],ebx
_118
	mov	ebx,[ebp-16]
	mov	[ebp-12],ebx
	cmp	[ebp-20],1
	jnz	_119
	mov	[ebp-8],-1
_119
	cmp	[ebp-8],-1
	setnz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp-12]
	sub	ebx,[ebp-8]
	cmp	ebx,[ebp+20]
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_120
	sub	esp,8
	lea	eax,[ebp-24]
	mov	[esp],eax
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,_tquadrangeobj
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp-8]
	mov	esi,[ebp-24]
	mov	esi,[esi]
	add	esi,4
	mov	[esi],ebx
	mov	ebx,[ebp-12]
	mov	esi,[ebp-24]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp-24]
	mov	esi,[esi]
	add	esi,12
	mov	[esi],ebx
	mov	ebx,1
	mov	esi,[ebp-24]
	mov	esi,[esi]
	add	esi,16
	mov	[esi],ebx
	sub	esp,8
	mov	eax,[ebp-24]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	mov	[ebp-28],eax
	sub	esp,4
	lea	ebx,[ebp+24]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp+4],ebx
	call	__bbStrStore
	sub	esp,4
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	jmp	_44_leave
_120
	add	[ebp-16],1
_113
	cmp	[ebp-16],2000
	jle	_114
_46
	sub	esp,4
	mov	eax,_121
	mov	[esp],eax
	call	__bbStrConst
	jmp	_44_leave
_44_leave
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[ebp-28],eax
	sub	esp,4
	mov	esi,[ebp-24]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-28]
	mov	[ebp-28],eax
	sub	esp,4
	mov	esi,[ebp+24]
	mov	[esp],esi
	mov	eax,esi
	call	__bbStrRelease
	mov	esi,eax
	mov	eax,[ebp-28]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	4
_acosine	.dd	0
	.dd	2
	.dd	1
	.dd	0
	.align	4
_asine	.dd	0
	.dd	2
	.dd	1
	.dd	0
	.align	4
_aquad	.dd	0
	.dd	5
	.dd	1
	.dd	0
	.align	4
_tquadobj	.dd	5
_52	.dd	0
	.dd	_52
	.dd	_52
	.dd	0
	.dd	-1
_53	.dd	0
	.dd	_53
	.dd	_53
	.dd	0
	.dd	-1
	.dd	29
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbIntType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbIntType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbIntType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbIntType
	.dd	__bbIntType
	.align	4
_tquadrangeobj	.dd	5
_54	.dd	0
	.dd	_54
	.dd	_54
	.dd	0
	.dd	-1
_55	.dd	0
	.dd	_55
	.dd	_55
	.dd	0
	.dd	-1
	.dd	5
	.dd	__bbStrType
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	__bbIntType
	.align	4
_temptyquadlist	.dd	5
_56	.dd	0
	.dd	_56
	.dd	_56
	.dd	0
	.dd	-1
_57	.dd	0
	.dd	_57
	.dd	_57
	.dd	0
	.dd	-1
	.dd	1
	.dd	__bbIntType
	.align	4
_tsurfacedquad	.dd	5
_58	.dd	0
	.dd	_58
	.dd	_58
	.dd	0
	.dd	-1
_59	.dd	0
	.dd	_59
	.dd	_59
	.dd	0
	.dd	-1
	.dd	3
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	__bbIntType
_108	.db	"",0
_109	.db	"0",0
_112	.db	"0",0
_121	.db	"",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	0

