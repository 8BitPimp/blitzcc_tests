
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,84
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	mov	[ebp-36],ebx
	mov	[ebp-40],ebx
	mov	[ebp-44],ebx
	mov	[ebp-48],ebx
	mov	[ebp-52],ebx
	mov	[ebp-56],ebx
	mov	[ebp-60],ebx
	mov	[ebp-64],ebx
	mov	[ebp-68],ebx
	mov	[ebp-72],ebx
	mov	[ebp-76],ebx
	mov	[ebp-80],ebx
	sub	esp,4
	mov	eax,_apmark
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,3
	mov	esi,_apmark
	add	esi,12
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apmark
	mov	[esp],eax
	call	__bbDimArray
	mov	[ebp-4],0
	jmp	_23
_24
	sub	esp,8
	mov	eax,[ebp-4]
	shl	eax,byte 2
	add	eax,[_apmark]
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,_tptr
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbObjStore
	add	[ebp-4],1
_23
	cmp	[ebp-4],3
	jle	_24
_5
	sub	esp,16
	mov	[esp+8],0
	mov	[esp+12],0
	mov	[esp+4],600
	mov	[esp],800
	call	_fgraphics
	sub	esp,24
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+8],0
	mov	[esp+4],14
	sub	esp,4
	mov	eax,_25
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_floadfont
	mov	[esp],eax
	call	_fsetfont
	sub	esp,4
	mov	eax,_achange
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,24
	mov	esi,_achange
	add	esi,12
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_achange
	mov	[esp],eax
	call	__bbDimArray
	mov	[ebp-4],0
	jmp	_26
_27
	sub	esp,8
	lea	eax,[ebp-8]
	mov	[esp],eax
	mov	[ebp-84],eax
	mov	eax,ebx
	call	__bbReadStr
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbStrStore
	mov	[ebp-12],0
	jmp	_28
_29
	sub	esp,20
	mov	eax,[ebp-12]
	mov	[esp],eax
	call	__bbStrFromInt
	mov	[esp+4],eax
	mov	[esp+8],1
	mov	[ebp-84],eax
	sub	esp,4
	lea	ebx,[ebp-8]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrLoad
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp],ebx
	mov	eax,ebx
	call	_finstr
	mov	ebx,eax
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbSgn
	mov	ebx,eax
	mov	esi,[ebp-4]
	shl	esi,byte 4
	add	esi,[ebp-12]
	shl	esi,byte 2
	add	esi,[_achange]
	mov	[esi],ebx
	add	[ebp-12],1
_28
	cmp	[ebp-12],8
	jle	_29
_7
	add	[ebp-4],1
_26
	cmp	[ebp-4],1
	jle	_27
_6
	sub	esp,12
	mov	[esp+4],600
	mov	[esp+8],1
	mov	[esp],800
	call	_fcreateimage
	mov	[ebp-16],eax
	sub	esp,8
	mov	eax,[ebp-16]
	mov	[esp],eax
	mov	[esp+4],0
	call	_fimagebuffer
	mov	[_vib],eax
	sub	esp,8
	mov	eax,_30
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_floadimage
	mov	[ebp-20],eax
	sub	esp,8
	mov	eax,[ebp-20]
	mov	[esp],eax
	mov	[esp+4],0
	call	_fimagebuffer
	mov	[ebp-24],eax
	sub	esp,4
	mov	eax,[ebp-20]
	mov	[esp],eax
	call	_fimagewidth
	mov	[ebp-28],eax
	sub	esp,4
	mov	eax,[ebp-20]
	mov	[esp],eax
	call	_fimageheight
	mov	[ebp-32],eax
	mov	[ebp-36],0
	jmp	_31
_32
	mov	[ebp-40],0
	jmp	_33
_34
	sub	esp,12
	mov	ebx,[ebp-40]
	mov	[esp+4],ebx
	mov	esi,[ebp-24]
	mov	[esp+8],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_freadpixel
	mov	ebx,255
	and	eax,ebx
	and	eax,eax
	jz	_35
	cmp	[_vcellq],0
	jnz	_36
	sub	esp,8
	lea	eax,[ebp-44]
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,_tptr
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbObjStore
	add	[ebp-48],1
	mov	ebx,400
	mov	esi,[ebp-44]
	mov	esi,[esi]
	add	esi,16
	mov	[esi],ebx
	mov	ebx,300
	mov	esi,[ebp-44]
	mov	esi,[esi]
	add	esi,20
	mov	[esi],ebx
	mov	ebx,[ebp-36]
	mov	[ebp-52],ebx
	mov	ebx,[ebp-40]
	mov	[ebp-56],ebx
_36
	sub	esp,16
	mov	ebx,[ebp-36]
	sub	ebx,[ebp-52]
	mov	[esp+4],ebx
	mov	esi,[ebp-40]
	sub	esi,[ebp-56]
	mov	[esp+8],esi
	mov	eax,[ebp-44]
	mov	[esp],eax
	call	_ffindcell
	mov	[esp],eax
	call	_fnewborn
_35
	add	[ebp-40],1
_33
	mov	ebx,[ebp-32]
	sub	ebx,1
	cmp	[ebp-40],ebx
	jle	_34
_9
	add	[ebp-36],1
_31
	mov	ebx,[ebp-28]
	sub	ebx,1
	cmp	[ebp-36],ebx
	jle	_32
_8
	sub	esp,4
	mov	eax,[ebp-20]
	mov	[esp],eax
	call	_ffreeimage
_37
	sub	esp,16
	mov	[esp+8],0
	mov	[esp+12],0
	mov	[esp+4],0
	mov	eax,[ebp-16]
	mov	[esp],eax
	call	_fdrawblock
	add	[ebp-60],1
	sub	esp,8
	mov	[esp],400
	mov	[esp+4],300
	call	_fmovemouse
	cmp	[_vcellq],0
	jnz	_38
	jmp	_10
_38
	sub	esp,8
	lea	eax,[ebp-64]
	mov	[esp],eax
	mov	[esp+4],_tchang
	call	__bbObjEachFirst
	and	eax,eax
	jz	_11
_39
	mov	ebx,[ebp-64]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,[_achange]
	mov	ebx,[ebx]
	and	ebx,ebx
	jz	_40
	sub	esp,8
	mov	eax,[ebp-64]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	mov	[esp],eax
	mov	ebx,2
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjInsAfter
_40
	sub	esp,4
	lea	eax,[ebp-64]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_39
_11
	sub	esp,4
	mov	eax,_tchang
	mov	[esp],eax
	call	__bbObjDeleteEach
	sub	esp,8
	lea	eax,[ebp-44]
	mov	[esp],eax
	mov	ebx,2
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjStore
_41
	sub	esp,8
	lea	eax,[ebp-44]
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,[ebp-44]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNext
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-44]
	mov	[esp],eax
	mov	ebx,3
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjCompare
	cmp	eax,0
	jnz	_42
	jmp	_12
_42
	mov	ebx,[ebp-44]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	cmp	ebx,16
	jge	_43
	sub	esp,4
	mov	eax,[ebp-44]
	mov	[esp],eax
	call	_fnewborn
	jmp	_44
_43
	mov	[ebp-4],0
	jmp	_45
_46
	sub	esp,8
	mov	ebx,[ebp-4]
	shl	ebx,byte 2
	mov	esi,[ebp-44]
	mov	esi,[esi]
	add	esi,12
	mov	esi,[esi]
	add	ebx,esi
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	lea	eax,[ebp-68]
	mov	[esp],eax
	call	__bbObjStore
	mov	ebx,[ebp-68]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	sub	ebx,1
	mov	esi,[ebp-68]
	mov	esi,[esi]
	add	esi,24
	mov	[esi],ebx
	mov	ebx,[ebp-68]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,[_achange]
	mov	ebx,[ebx]
	and	ebx,ebx
	jz	_47
	sub	esp,8
	lea	eax,[ebp-64]
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,_tchang
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-64]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	mov	ebx,[ebp-68]
	mov	[esp+4],ebx
	call	__bbObjStore
_47
	add	[ebp-4],1
_45
	cmp	[ebp-4],7
	jle	_46
_13
	mov	ebx,[ebp-44]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	mov	esi,15
	and	ebx,esi
	mov	esi,[ebp-44]
	mov	esi,[esi]
	add	esi,24
	mov	[esi],ebx
	sub	esp,16
	mov	[esp+8],0
	mov	esi,[_vib]
	mov	[esp+12],esi
	mov	esi,[ebp-44]
	mov	esi,[esi]
	add	esi,20
	mov	esi,[esi]
	add	esi,[_vscry]
	mov	[esp+4],esi
	mov	eax,[ebp-44]
	mov	eax,[eax]
	add	eax,16
	mov	eax,[eax]
	add	eax,[_vscrx]
	mov	[esp],eax
	call	_fwritepixel
	sub	[_vcellq],1
	mov	ebx,[ebp-44]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,[_achange]
	mov	ebx,[ebx]
	and	ebx,ebx
	jz	_48
	sub	esp,8
	lea	eax,[ebp-64]
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,_tchang
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-64]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	mov	ebx,[ebp-44]
	mov	[esp+4],ebx
	call	__bbObjStore
_48
_44
	jmp	_41
_12
	sub	esp,8
	mov	eax,2
	shl	eax,byte 2
	add	eax,[_apmark]
	mov	eax,[eax]
	mov	[esp],eax
	mov	ebx,3
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjInsBefore
	call	_fmousex
	sub	eax,400
	mov	[ebp-72],eax
	call	_fmousey
	sub	eax,300
	mov	[ebp-76],eax
	cmp	[ebp-72],0
	setnz	al
	movzx	eax,al
	mov	[ebp-84],eax
	cmp	[ebp-76],0
	mov	eax,ebx
	setnz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-84]
	or	eax,ebx
	and	eax,eax
	jz	_49
	mov	ebx,[ebp-72]
	add	[_vscrx],ebx
	mov	ebx,[ebp-76]
	add	[_vscry],ebx
	sub	esp,4
	mov	eax,[_vib]
	mov	[esp],eax
	call	_fsetbuffer
	call	_fcls
	sub	esp,4
	call	_ffrontbuffer
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,8
	lea	eax,[ebp-44]
	mov	[esp],eax
	mov	ebx,1
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjStore
_50
	sub	esp,8
	lea	eax,[ebp-44]
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,[ebp-44]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNext
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-44]
	mov	[esp],eax
	mov	ebx,2
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjCompare
	cmp	eax,0
	jnz	_51
	jmp	_14
_51
	mov	ebx,[ebp-44]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	mov	esi,16
	and	ebx,esi
	and	ebx,ebx
	jz	_52
	sub	esp,16
	mov	[esp+8],-1
	mov	esi,[_vib]
	mov	[esp+12],esi
	mov	esi,[ebp-44]
	mov	esi,[esi]
	add	esi,20
	mov	esi,[esi]
	add	esi,[_vscry]
	mov	[esp+4],esi
	mov	eax,[ebp-44]
	mov	eax,[eax]
	add	eax,16
	mov	eax,[eax]
	add	eax,[_vscrx]
	mov	[esp],eax
	call	_fwritepixel
_52
	jmp	_50
_14
_49
	sub	esp,4
	mov	eax,[_vib]
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	[esp+12],36
	mov	[esp+16],1
	mov	[esp+8],100
	mov	[esp+4],0
	mov	[esp],0
	call	_frect
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,32
	mov	eax,1148846080
	push	eax
	fld	[esp]
	pop	eax
	mov	[ebp-84],eax
	mov	eax,ebx
	call	_fmillisecs
	mov	ebx,eax
	mov	eax,[ebp-84]
	sub	ebx,[ebp-80]
	push	ebx
	fild	[esp]
	pop	ebx
	fdivp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp],eax
	call	__bbStrFromFloat
	mov	[esp+4],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,_53
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConcat
	mov	ebx,eax
	mov	[esp+8],ebx
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],0
	mov	[esp],0
	call	_ftext
	sub	esp,32
	mov	eax,_54
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,[_vcellq]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],12
	mov	[esp],0
	call	_ftext
	sub	esp,32
	mov	eax,_55
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,[ebp-60]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],24
	mov	[esp],0
	call	_ftext
	call	_fmillisecs
	mov	[ebp-80],eax
	sub	esp,4
	call	_ffrontbuffer
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,4
	mov	[esp],1
	call	_fkeyhit
	and	eax,eax
	jz	_37
_10
	call	_fend
	ret
_2_leave
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,[ebp-64]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	[ebp-84],eax
	sub	esp,4
	mov	esi,[ebp-68]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-84]
	mov	[ebp-84],eax
	sub	esp,4
	mov	esi,[ebp-44]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-84]
	mov	[ebp-84],eax
	sub	esp,4
	mov	ebx,[ebp-8]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-84]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_ffindcell
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,24
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	cmp	[ebp+24],0
	setz	al
	movzx	eax,al
	mov	[ebp-24],eax
	cmp	[ebp+28],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-24]
	and	eax,ebx
	and	eax,eax
	jz	_60
	mov	eax,[ebp+20]
	jmp	_15_leave
_60
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,16
	mov	ebx,[ebx]
	add	ebx,[ebp+24]
	mov	[ebp-4],ebx
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,20
	mov	ebx,[ebx]
	add	ebx,[ebp+28]
	mov	[ebp-8],ebx
	mov	[ebp-12],1
_61
	sub	esp,8
	mov	eax,[ebp+20]
	mov	eax,[eax]
	add	eax,4
	mov	eax,[eax]
	mov	[esp],eax
	mov	[esp+4],0
	call	__bbObjCompare
	cmp	eax,0
	jnz	_62
	sub	esp,8
	lea	eax,[ebp-16]
	mov	[esp],eax
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,_tptr
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-16]
	mov	[esp],eax
	mov	ebx,0
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjInsAfter
	cmp	[ebp+24],0
	setl	al
	movzx	eax,al
	mov	[ebp-24],eax
	cmp	[ebp+28],0
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-24]
	shl	ebx,byte 1
	add	eax,ebx
	mov	[ebp-20],eax
	sub	esp,8
	mov	eax,[ebp-20]
	shl	eax,byte 2
	mov	ebx,[ebp-16]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	add	eax,ebx
	mov	[esp],eax
	mov	ebx,[ebp+20]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp+20]
	mov	eax,[eax]
	add	eax,4
	mov	[esp],eax
	mov	ebx,[ebp-16]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp-20]
	mov	esi,[ebp+20]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	jmp	_63
_62
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,8
	mov	ebx,[ebx]
	mov	[ebp-20],ebx
	sub	esp,8
	lea	eax,[ebp-16]
	mov	[esp],eax
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,4
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjStore
_63
	mov	ebx,[ebp-20]
	mov	esi,1
	and	ebx,esi
	and	ebx,ebx
	jz	_64
	mov	ebx,[ebp-12]
	add	[ebp+24],ebx
_64
	mov	ebx,[ebp-20]
	mov	esi,2
	and	ebx,esi
	and	ebx,ebx
	jz	_65
	mov	ebx,[ebp-12]
	add	[ebp+28],ebx
_65
	mov	ebx,[ebp-12]
	shl	ebx,byte 1
	mov	[ebp-12],ebx
	mov	ebx,[ebp-16]
	mov	[ebp+20],ebx
	cmp	[ebp+24],0
	setge	al
	movzx	eax,al
	mov	[ebp-24],eax
	cmp	[ebp+28],0
	mov	eax,ebx
	setge	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-24]
	and	eax,ebx
	mov	[ebp-24],eax
	mov	ebx,[ebp-12]
	cmp	[ebp+24],ebx
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-24]
	and	eax,ebx
	mov	[ebp-24],eax
	mov	ebx,[ebp-12]
	cmp	[ebp+28],ebx
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-24]
	and	eax,ebx
	and	eax,eax
	jz	_61
_16
_66
	mov	ebx,[ebp-12]
	shr	ebx,byte 1
	mov	[ebp-12],ebx
	mov	eax,[ebp+24]
	mov	ebx,[ebp-12]
	and	eax,ebx
	cmp	eax,[ebp-12]
	setz	al
	movzx	eax,al
	mov	[ebp-24],eax
	mov	ebx,[ebp+28]
	mov	esi,[ebp-12]
	and	ebx,esi
	cmp	ebx,[ebp-12]
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-24]
	shl	ebx,byte 1
	add	eax,ebx
	mov	[ebp-20],eax
	sub	esp,8
	mov	eax,[ebp-20]
	shl	eax,byte 2
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	add	eax,ebx
	mov	eax,[eax]
	mov	[esp],eax
	mov	[esp+4],0
	call	__bbObjCompare
	cmp	eax,0
	jnz	_67
	sub	esp,8
	lea	eax,[ebp-16]
	mov	[esp],eax
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,_tptr
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-16]
	mov	[esp],eax
	mov	ebx,0
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjInsAfter
	sub	esp,8
	mov	eax,[ebp-20]
	shl	eax,byte 2
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,0
	mov	ebx,[ebx]
	add	eax,ebx
	mov	[esp],eax
	mov	ebx,[ebp-16]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-16]
	mov	eax,[eax]
	add	eax,4
	mov	[esp],eax
	mov	ebx,[ebp+20]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp-20]
	mov	esi,[ebp-16]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	cmp	[ebp-12],1
	jnz	_68
	sub	esp,8
	mov	eax,[ebp-16]
	mov	[esp],eax
	mov	ebx,1
	shl	ebx,byte 2
	add	ebx,[_apmark]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	call	__bbObjInsAfter
	mov	ebx,[ebp-4]
	mov	esi,[ebp-16]
	mov	esi,[esi]
	add	esi,16
	mov	[esi],ebx
	mov	ebx,[ebp-8]
	mov	esi,[ebp-16]
	mov	esi,[esi]
	add	esi,20
	mov	[esi],ebx
_68
_67
	mov	ebx,[ebp-20]
	shl	ebx,byte 2
	mov	esi,[ebp+20]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	add	ebx,esi
	mov	ebx,[ebx]
	mov	[ebp+20],ebx
	cmp	[ebp-12],1
	jnz	_66
_17
	mov	eax,[ebp+20]
	jmp	_15_leave
	mov	eax,0
	jmp	_15_leave
_15_leave
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fnewborn
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,24
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-4],-1
	jmp	_69
_70
	mov	[ebp-8],-1
	jmp	_71
_72
	mov	ebx,[ebp-4]
	mov	esi,[ebp-8]
	or	ebx,esi
	and	ebx,ebx
	jz	_73
	sub	esp,20
	mov	ebx,[ebp-4]
	mov	[esp+4],ebx
	mov	esi,[ebp-8]
	mov	[esp+8],esi
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_ffindcell
	mov	[esp+4],eax
	lea	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjStore
	mov	ebx,eax
	mov	ebx,[ebp-12]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	add	ebx,1
	mov	esi,[ebp-12]
	mov	esi,[esi]
	add	esi,24
	mov	[esi],ebx
	mov	ebx,[ebp-12]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,[_achange]
	mov	ebx,[ebx]
	and	ebx,ebx
	jz	_74
	sub	esp,8
	lea	eax,[ebp-16]
	mov	[esp],eax
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,_tchang
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-16]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	mov	ebx,[ebp-12]
	mov	[esp+4],ebx
	call	__bbObjStore
_74
	sub	esp,8
	mov	eax,[ebp-20]
	shl	eax,byte 2
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,12
	mov	ebx,[ebx]
	add	eax,ebx
	mov	[esp],eax
	mov	ebx,[ebp-12]
	mov	[esp+4],ebx
	call	__bbObjStore
	add	[ebp-20],1
_73
	add	[ebp-8],1
_71
	cmp	[ebp-8],1
	jle	_72
_20
	add	[ebp-4],1
_69
	cmp	[ebp-4],1
	jle	_70
_19
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	mov	esi,16
	or	ebx,esi
	mov	esi,[ebp+20]
	mov	esi,[esi]
	add	esi,24
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	mov	ebx,[ebx]
	add	ebx,24
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,[_achange]
	mov	ebx,[ebx]
	and	ebx,ebx
	jz	_75
	sub	esp,8
	lea	eax,[ebp-16]
	mov	[esp],eax
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,_tchang
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	eax,[ebp-16]
	mov	eax,[eax]
	add	eax,0
	mov	[esp],eax
	mov	ebx,[ebp+20]
	mov	[esp+4],ebx
	call	__bbObjStore
_75
	sub	esp,16
	mov	[esp+8],-1
	mov	esi,[_vib]
	mov	[esp+12],esi
	mov	esi,[ebp+20]
	mov	esi,[esi]
	add	esi,20
	mov	esi,[esi]
	add	esi,[_vscry]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	mov	eax,[eax]
	add	eax,16
	mov	eax,[eax]
	add	eax,[_vscrx]
	mov	[esp],eax
	call	_fwritepixel
	add	[_vcellq],1
	mov	eax,0
	jmp	_18_leave
_18_leave
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	[ebp-24],eax
	sub	esp,4
	mov	esi,[ebp-16]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-24]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	4
_vcellq	.dd	0
	.align	4
_vscrx	.dd	0
	.align	4
_vscry	.dd	0
	.align	4
_vib	.dd	0
	.align	4
_apmark	.dd	0
	.dd	5
	.dd	1
	.dd	0
_25	.db	" Arial cyr ",0
	.align	4
_achange	.dd	0
	.dd	1
	.dd	1
	.dd	0
_30	.db	"locomot.png",0
_53	.db	"FPS: ",0
_54	.db	"Cells(Cages): ",0
_55	.db	"Generation: ",0
	.align	4
_3	.dd	6
	.dd	4
	.dd	_tptr
	.align	4
_4	.dd	6
	.dd	8
	.dd	_tptr
	.align	4
_tptr	.dd	5
_56	.dd	0
	.dd	_56
	.dd	_56
	.dd	0
	.dd	-1
_57	.dd	0
	.dd	_57
	.dd	_57
	.dd	0
	.dd	-1
	.dd	7
	.dd	_3
	.dd	_tptr
	.dd	__bbIntType
	.dd	_4
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	__bbIntType
	.align	4
_tchang	.dd	5
_58	.dd	0
	.dd	_58
	.dd	_58
	.dd	0
	.dd	-1
_59	.dd	0
	.dd	_59
	.dd	_59
	.dd	0
	.dd	-1
	.dd	1
	.dd	_tptr
_21	.db	"3",0
_22	.db	"0145678",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	4
	.dd	_21
	.dd	4
	.dd	_22
	.dd	0

