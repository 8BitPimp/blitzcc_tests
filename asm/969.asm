
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	sub	esp,16
	mov	[esp+8],32
	mov	[esp+12],1
	mov	[esp+4],480
	mov	[esp],640
	call	_fgraphics
	sub	esp,4
	call	_fbackbuffer
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,4
	mov	eax,_amt
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,4
	mov	esi,_amt
	add	esi,12
	mov	[esi],ebx
	mov	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	[esi],ebx
	mov	ebx,8
	mov	esi,_amt
	add	esi,20
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_amt
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	[esp],5000
	call	_finitstars
_20
	call	_fcls
	mov	ebx,[_vcr]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,1065353216
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[_vcr],ebx
	call	_fmousexspeed
	push	eax
	fild	[esp]
	pop	eax
	mov	ebx,1045220557
	push	ebx
	fld	[esp]
	pop	ebx
	fmulp	st(1)
	mov	ebx,[_vcp]
	push	ebx
	fld	[esp]
	pop	ebx
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[_vcp],ebx
	call	_fmouseyspeed
	push	eax
	fild	[esp]
	pop	eax
	mov	ebx,1045220557
	push	ebx
	fld	[esp]
	pop	ebx
	fmulp	st(1)
	mov	ebx,[_vct]
	push	ebx
	fld	[esp]
	pop	ebx
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[_vct],ebx
	mov	ebx,[_vcz]
	push	ebx
	fld	[esp]
	pop	ebx
	sub	esp,4
	mov	[esp],1
	call	_fmousedown
	imul	eax,6
	push	eax
	fild	[esp]
	pop	eax
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[_vcz],ebx
	mov	ebx,[_vcz]
	push	ebx
	fld	[esp]
	pop	ebx
	sub	esp,4
	mov	[esp],2
	call	_fmousedown
	imul	eax,6
	push	eax
	fild	[esp]
	pop	eax
	fsubp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[_vcz],ebx
	sub	esp,8
	mov	[esp],320
	mov	[esp+4],240
	call	_fmovemouse
	call	_fflushmouse
	call	_fstarcycle
	sub	esp,4
	mov	[esp],1
	call	_fflip
	sub	esp,4
	mov	[esp],1
	call	_fkeydown
	and	eax,eax
	jz	_20
_3
	call	_fendgraphics
	call	_fend
	ret
_2_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fline
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,32
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	ebx,[ebp+28]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+20]
	push	esi
	fld	[esp]
	pop	esi
	fsubp	st(1)
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	[ebp-4],ebx
	mov	ebx,[ebp+32]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp+24]
	push	esi
	fld	[esp]
	pop	esi
	fsubp	st(1)
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	[ebp-8],ebx
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbAbs
	mov	[ebp-32],eax
	sub	esp,4
	mov	ebx,[ebp-8]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbAbs
	mov	ebx,eax
	mov	eax,[ebp-32]
	cmp	eax,ebx
	jle	_25
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbAbs
	mov	[ebp-12],eax
	jmp	_26
_25
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	__bbAbs
	mov	[ebp-12],eax
_26
	cmp	[ebp-12],2
	jge	_27
	mov	[ebp-12],2
_27
	mov	ebx,[ebp-4]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[ebp-12]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-16],ebx
	mov	ebx,[ebp-8]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,[ebp-12]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-20],ebx
	mov	ebx,[ebp+36]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-12]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],0
	mov	ebx,[ebp-12]
	mov	[ebp-12],ebx
	jmp	_28
_29
	sub	esp,16
	mov	ebx,[ebp-28]
	push	ebx
	fld	[esp]
	pop	ebx
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	esi,[ebp-28]
	push	esi
	fld	[esp]
	pop	esi
	push	esi
	fistp	[esp]
	pop	esi
	shl	esi,byte 8
	or	ebx,esi
	mov	esi,[ebp-28]
	push	esi
	fld	[esp]
	pop	esi
	push	esi
	fistp	[esp]
	pop	esi
	shl	esi,byte 16
	or	ebx,esi
	mov	[esp+8],ebx
	mov	[esp+12],0
	mov	esi,[ebp+24]
	push	esi
	fld	[esp]
	pop	esi
	push	esi
	fistp	[esp]
	pop	esi
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	push	eax
	fld	[esp]
	pop	eax
	push	eax
	fistp	[esp]
	pop	eax
	mov	[esp],eax
	call	_fwritepixelfast
	mov	ebx,[ebp-28]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-24]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-28],ebx
	mov	ebx,[ebp+20]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-16]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp+20],ebx
	mov	ebx,[ebp+24]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-20]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp+24],ebx
	add	[ebp-12],-1
_28
	cmp	[ebp-12],1
	jge	_29
_5
	mov	eax,0
	jmp	_4_leave
_4_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 20
	.align	16
_finitstars
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,12
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-8],1
	jmp	_30
_31
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,_tstar
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,28
	mov	[esp],-985956352
	mov	[esp+4],1161527296
	call	_frnd
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp+4],eax
	mov	[ebp-12],eax
	sub	esp,8
	mov	[esp],-981860352
	mov	[esp+4],1165623296
	mov	eax,ebx
	call	_frnd
	mov	ebx,eax
	mov	eax,[ebp-12]
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp+8],ebx
	mov	[ebp-12],eax
	sub	esp,8
	mov	[esp],-985956352
	mov	[esp+4],1161527296
	mov	eax,ebx
	call	_frnd
	mov	ebx,eax
	mov	eax,[ebp-12]
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp],ebx
	mov	eax,ebx
	call	_fvector
	mov	ebx,eax
	mov	[esp+4],ebx
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,12
	mov	[esp],eax
	call	__bbObjStore
	add	[ebp-8],1
_30
	mov	ebx,[ebp+20]
	cmp	[ebp-8],ebx
	jle	_31
_7
	mov	eax,0
	jmp	_6_leave
_6_leave
	mov	[ebp-12],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-12]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fstarcycle
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,36
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	sub	esp,8
	lea	eax,[ebp-8]
	mov	[esp],eax
	mov	[ebp-36],eax
	sub	esp,4
	mov	ebx,_tvector
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-36]
	mov	[esp+4],ebx
	call	__bbObjStore
	sub	esp,8
	mov	[esp],1
	mov	ebx,[_vcp]
	mov	[esp+4],ebx
	call	_fgen_x_mat
	sub	esp,8
	mov	[esp],2
	mov	ebx,[_vct]
	mov	[esp+4],ebx
	call	_fgen_y_mat
	sub	esp,12
	mov	[esp+4],2
	mov	[esp+8],3
	mov	[esp],1
	call	_fmulti_mat
	sub	esp,8
	mov	[esp],2
	mov	ebx,[_vcr]
	mov	[esp+4],ebx
	call	_fgen_z_mat
	sub	esp,16
	mov	ebx,[_vcy]
	mov	[esp+8],ebx
	mov	esi,[_vcz]
	mov	[esp+12],esi
	mov	esi,[_vcx]
	mov	[esp+4],esi
	mov	[esp],5
	call	_fgen_t_mat
	sub	esp,12
	mov	[esp+4],2
	mov	[esp+8],1
	mov	[esp],3
	call	_fmulti_mat
	sub	esp,12
	mov	[esp+4],5
	mov	[esp+8],2
	mov	[esp],1
	call	_fmulti_mat
	mov	[ebp-16],2
	sub	esp,4
	mov	[esp],0
	call	_flockbuffer
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[esp+4],_tstar
	call	__bbObjEachFirst
	and	eax,eax
	jz	_9
_32
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-16]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,12
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	imul	esi,3
	add	esi,2
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	mov	edi,[ebp-4]
	mov	edi,[edi]
	add	edi,12
	mov	edi,[edi]
	mov	edi,[edi]
	add	edi,4
	mov	edi,[edi]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	faddp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	imul	esi,3
	add	esi,3
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	mov	edi,[ebp-4]
	mov	edi,[edi]
	add	edi,12
	mov	edi,[edi]
	mov	edi,[edi]
	add	edi,8
	mov	edi,[edi]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	faddp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	imul	esi,3
	add	esi,4
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1132462080
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	[ebp-12],ebx
	mov	ebx,1199505408
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-12]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	push	ebx
	fistp	[esp]
	pop	ebx
	mov	[ebp-20],ebx
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-16]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,12
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,2
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	mov	edi,[ebp-4]
	mov	edi,[edi]
	add	edi,12
	mov	edi,[edi]
	mov	edi,[edi]
	add	edi,4
	mov	edi,[edi]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	faddp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,3
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	mov	edi,[ebp-4]
	mov	edi,[edi]
	add	edi,12
	mov	edi,[edi]
	mov	edi,[edi]
	add	edi,8
	mov	edi,[edi]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	faddp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,4
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1132462080
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	mov	esi,1134559232
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fistp	[esp]
	pop	esi
	mov	[ebp-24],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-16]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,12
	mov	esi,[esi]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,2
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	mov	edi,[ebp-4]
	mov	edi,[edi]
	add	edi,12
	mov	edi,[edi]
	mov	edi,[edi]
	add	edi,4
	mov	edi,[edi]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	faddp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,3
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	mov	edi,[ebp-4]
	mov	edi,[edi]
	add	edi,12
	mov	edi,[edi]
	mov	edi,[edi]
	add	edi,8
	mov	edi,[edi]
	push	edi
	fld	[esp]
	pop	edi
	fmulp	st(1)
	faddp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,4
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp-16]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	mov	esi,1132462080
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-12]
	push	esi
	fild	[esp]
	pop	esi
	fdivp	st(1)
	mov	esi,1128792064
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fistp	[esp]
	pop	esi
	mov	[ebp-28],esi
	cmp	[ebp-20],0
	jge	_33
	mov	[ebp-20],0
_33
	cmp	[ebp-20],255
	jle	_34
	mov	[ebp-20],255
_34
	cmp	[ebp-28],0
	setg	al
	movzx	eax,al
	mov	[ebp-36],eax
	cmp	[ebp-28],480
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-36]
	and	eax,ebx
	mov	[ebp-36],eax
	cmp	[ebp-24],0
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-36]
	and	eax,ebx
	mov	[ebp-36],eax
	cmp	[ebp-24],640
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-36]
	and	eax,ebx
	and	eax,eax
	jz	_35
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,20
	mov	ebx,[ebx]
	cmp	ebx,1
	jnz	_36
	mov	ebx,[ebp-24]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	mov	ebx,[ebp-28]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,4
	mov	[esi],ebx
	mov	ebx,0
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,20
	mov	[esi],ebx
_36
	sub	esp,20
	mov	ebx,[ebp-28]
	push	ebx
	fild	[esp]
	pop	ebx
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp+12],ebx
	mov	esi,[ebp-20]
	push	esi
	fild	[esp]
	pop	esi
	push	esi
	fstp	[esp]
	pop	esi
	mov	[esp+16],esi
	mov	esi,[ebp-24]
	push	esi
	fild	[esp]
	pop	esi
	push	esi
	fstp	[esp]
	pop	esi
	mov	[esp+8],esi
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,4
	mov	ebx,[ebx]
	push	ebx
	fild	[esp]
	pop	ebx
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[esp+4],ebx
	mov	eax,[ebp-4]
	mov	eax,[eax]
	add	eax,0
	mov	eax,[eax]
	push	eax
	fild	[esp]
	pop	eax
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp],eax
	call	_fline
	jmp	_37
_35
	mov	ebx,1
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,20
	mov	[esi],ebx
_37
	mov	ebx,[ebp-24]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	sub	ebx,esi
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,1048576000
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,0
	mov	esi,[esi]
	push	esi
	fild	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fistp	[esp]
	pop	esi
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,0
	mov	[ebx],esi
	mov	ebx,[ebp-28]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,4
	mov	esi,[esi]
	sub	ebx,esi
	push	ebx
	fild	[esp]
	pop	ebx
	mov	esi,1048576000
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,4
	mov	esi,[esi]
	push	esi
	fild	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fistp	[esp]
	pop	esi
	mov	ebx,[ebp-4]
	mov	ebx,[ebx]
	add	ebx,4
	mov	[ebx],esi
	sub	esp,4
	lea	eax,[ebp-4]
	mov	[esp],eax
	call	__bbObjEachNext
	and	eax,eax
	jnz	_32
_9
	sub	esp,4
	mov	[esp],0
	call	_funlockbuffer
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	__bbObjDelete
	mov	eax,[ebp-32]
	jmp	_8_leave
	mov	eax,0
	jmp	_8_leave
_8_leave
	mov	[ebp-36],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-36]
	mov	[ebp-36],eax
	sub	esp,4
	mov	esi,[ebp-8]
	mov	[esp],esi
	mov	eax,esi
	call	__bbObjRelease
	mov	esi,eax
	mov	eax,[ebp-36]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fplaytrack
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,4
	sub	esp,24
	mov	eax,_38
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-4],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-4]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-4],eax
	sub	esp,4
	mov	ebx,_39
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-4]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	call	_fplaymusic
	mov	eax,0
	jmp	_10_leave
_10_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fgen_x_mat
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fsin
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fsin
	fchs
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	eax,0
	jmp	_11_leave
_11_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 8
	.align	16
_fgen_y_mat
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fsin
	fchs
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fsin
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	eax,0
	jmp	_12_leave
_12_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 8
	.align	16
_fgen_z_mat
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fsin
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fsin
	fchs
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	sub	esp,4
	mov	eax,[ebp+24]
	mov	[esp],eax
	call	_fcos
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebx],eax
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	eax,0
	jmp	_13_leave
_13_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 8
	.align	16
_fgen_t_mat
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,[ebp+24]
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,[ebp+28]
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,3
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,[ebp+32]
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,1
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,2
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,3
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 2
	add	ebx,4
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,1065353216
	mov	[ebx],esi
	mov	eax,0
	jmp	_14_leave
_14_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 16
	.align	16
_fmulti_mat
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,12
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-4],1
	jmp	_40
_41
	mov	[ebp-8],1
	jmp	_42
_43
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-8]
	add	ebx,[ebp-4]
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+28]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	esi,0
	mov	[ebx],esi
	mov	[ebp-12],1
	jmp	_44
_45
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-12]
	add	ebx,[ebp-4]
	mov	esi,_amt
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+24]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	ebx,[ebx]
	push	ebx
	fld	[esp]
	pop	ebx
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp-8]
	add	esi,[ebp-12]
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp+20]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	fmulp	st(1)
	mov	esi,_amt
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp-8]
	add	esi,[ebp-4]
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp+28]
	add	esi,edi
	shl	esi,byte 2
	add	esi,[_amt]
	mov	esi,[esi]
	push	esi
	fld	[esp]
	pop	esi
	faddp	st(1)
	push	esi
	fstp	[esp]
	pop	esi
	mov	ebx,_amt
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-8]
	add	ebx,[ebp-4]
	mov	edi,_amt
	add	edi,16
	mov	edi,[edi]
	imul	edi,[ebp+28]
	add	ebx,edi
	shl	ebx,byte 2
	add	ebx,[_amt]
	mov	[ebx],esi
	add	[ebp-12],1
_44
	cmp	[ebp-12],4
	jle	_45
_18
	add	[ebp-8],1
_42
	cmp	[ebp-8],4
	jle	_43
_17
	add	[ebp-4],1
_40
	cmp	[ebp-4],4
	jle	_41
_16
	mov	eax,0
	jmp	_15_leave
_15_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	16
_fvector
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	mov	[ebp-4],0
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,_tvector
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjNew
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+4],ebx
	call	__bbObjStore
	mov	ebx,[ebp+20]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,0
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,4
	mov	[esi],ebx
	mov	ebx,[ebp+28]
	mov	esi,[ebp-4]
	mov	esi,[esi]
	add	esi,8
	mov	[esi],ebx
	mov	eax,[ebp-4]
	jmp	_19_leave
	mov	eax,0
	jmp	_19_leave
_19_leave
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbObjRelease
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 12
	.align	4
_amt	.dd	0
	.dd	2
	.dd	3
	.dd	0
	.dd	0
	.dd	0
	.align	4
_vscount	.dd	0
	.align	4
_vcx	.dd	0
	.align	4
_vcy	.dd	0
	.align	4
_vcz	.dd	0
	.align	4
_vcp	.dd	0
	.align	4
_vct	.dd	0
	.align	4
_vcr	.dd	0
	.align	4
_tvector	.dd	5
_21	.dd	0
	.dd	_21
	.dd	_21
	.dd	0
	.dd	-1
_22	.dd	0
	.dd	_22
	.dd	_22
	.dd	0
	.dd	-1
	.dd	3
	.dd	__bbFltType
	.dd	__bbFltType
	.dd	__bbFltType
	.align	4
_tstar	.dd	5
_23	.dd	0
	.dd	_23
	.dd	_23
	.dd	0
	.dd	-1
_24	.dd	0
	.dd	_24
	.dd	_24
	.dd	0
	.dd	-1
	.dd	6
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	__bbIntType
	.dd	_tvector
	.dd	__bbIntType
	.dd	__bbIntType
_38	.db	"t",0
_39	.db	".mid",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	0

