
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,28
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	sub	esp,16
	mov	[esp+8],16
	mov	[esp+12],2
	mov	[esp+4],600
	mov	[esp],800
	call	_fgraphics
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],255
	mov	[esp],0
	call	_fclscolor
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],0
	mov	[esp],255
	call	_fcolor
	sub	esp,20
	mov	[esp+12],10
	mov	[esp+16],1
	mov	[esp+8],10
	mov	[esp+4],100
	mov	[esp],100
	call	_foval
	sub	esp,20
	mov	[esp+12],10
	mov	[esp+16],1
	mov	[esp+8],10
	mov	[esp+4],100
	mov	[esp],700
	call	_foval
	sub	esp,20
	mov	[esp+12],10
	mov	[esp+16],1
	mov	[esp+8],10
	mov	[esp+4],437
	mov	[esp],100
	call	_foval
	sub	esp,20
	mov	[esp+12],10
	mov	[esp+16],1
	mov	[esp+8],10
	mov	[esp+4],437
	mov	[esp],700
	call	_foval
	sub	esp,20
	mov	[esp+12],337
	mov	[esp+16],1
	mov	[esp+8],600
	mov	[esp+4],105
	mov	[esp],105
	call	_frect
	sub	esp,20
	mov	[esp+12],5
	mov	[esp+16],1
	mov	[esp+8],600
	mov	[esp+4],100
	mov	[esp],105
	call	_frect
	sub	esp,20
	mov	[esp+12],337
	mov	[esp+16],1
	mov	[esp+8],5
	mov	[esp+4],105
	mov	[esp],100
	call	_frect
	sub	esp,20
	mov	[esp+12],5
	mov	[esp+16],1
	mov	[esp+8],600
	mov	[esp+4],442
	mov	[esp],105
	call	_frect
	sub	esp,20
	mov	[esp+12],337
	mov	[esp+16],1
	mov	[esp+8],5
	mov	[esp+4],105
	mov	[esp],705
	call	_frect
	sub	esp,12
	mov	eax,_3
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_finput
	mov	[esp],eax
	call	__bbStrToFloat
	push	eax
	fstp	[esp]
	pop	eax
	mov	[ebp-4],eax
	mov	ebx,[ebp-4]
	push	ebx
	fld	[esp]
	pop	ebx
	sub	esp,4
	mov	[esp],1105910958
	call	_fcos
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-8],ebx
	mov	ebx,[ebp-4]
	push	ebx
	fld	[esp]
	pop	ebx
	sub	esp,4
	mov	[esp],1105910958
	call	_fsin
	fmulp	st(1)
	push	ebx
	fstp	[esp]
	pop	ebx
	mov	[ebp-12],ebx
	sub	esp,32
	mov	eax,_4
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	[esp+8],1
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp],ebx
	mov	eax,ebx
	call	_finstr
	mov	ebx,eax
	add	ebx,1
	mov	[esp+4],ebx
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	__bbStrFromFloat
	mov	[esp],eax
	call	_fleft
	mov	[esp+4],eax
	lea	ebx,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrStore
	mov	ebx,eax
	sub	esp,32
	mov	eax,_5
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	[esp+8],1
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,[ebp-8]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp],ebx
	mov	eax,ebx
	call	_finstr
	mov	ebx,eax
	add	ebx,1
	mov	[esp+4],ebx
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	__bbStrFromFloat
	mov	[esp],eax
	call	_fleft
	mov	[esp+4],eax
	lea	ebx,[ebp-20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrStore
	mov	ebx,eax
	sub	esp,32
	mov	eax,_6
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	[esp+8],1
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromFloat
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[esp],ebx
	mov	eax,ebx
	call	_finstr
	mov	ebx,eax
	add	ebx,1
	mov	[esp+4],ebx
	sub	esp,4
	mov	eax,[ebp-12]
	mov	[esp],eax
	call	__bbStrFromFloat
	mov	[esp],eax
	call	_fleft
	mov	[esp+4],eax
	lea	ebx,[ebp-24]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrStore
	mov	ebx,eax
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],255
	call	_fcolor
	sub	esp,16
	mov	[esp+8],707
	mov	[esp+12],444
	mov	[esp+4],103
	mov	[esp],103
	call	_fline
	sub	esp,16
	mov	[esp+8],110
	mov	[esp+12],101
	mov	[esp+4],103
	mov	[esp],103
	call	_fline
	sub	esp,16
	mov	[esp+8],106
	mov	[esp+12],110
	mov	[esp+4],103
	mov	[esp],103
	call	_fline
	sub	esp,16
	mov	[esp+8],700
	mov	[esp+12],446
	mov	[esp+4],444
	mov	[esp],707
	call	_fline
	sub	esp,16
	mov	[esp+8],704
	mov	[esp+12],437
	mov	[esp+4],444
	mov	[esp],707
	call	_fline
	sub	esp,16
	mov	[esp+8],710
	mov	[esp+12],460
	mov	[esp+4],460
	mov	[esp],100
	call	_fline
	sub	esp,16
	mov	[esp+8],108
	mov	[esp+12],457
	mov	[esp+4],460
	mov	[esp],100
	call	_fline
	sub	esp,16
	mov	[esp+8],108
	mov	[esp+12],463
	mov	[esp+4],460
	mov	[esp],100
	call	_fline
	sub	esp,16
	mov	[esp+8],702
	mov	[esp+12],457
	mov	[esp+4],460
	mov	[esp],710
	call	_fline
	sub	esp,16
	mov	[esp+8],702
	mov	[esp+12],463
	mov	[esp+4],460
	mov	[esp],710
	call	_fline
	sub	esp,16
	mov	[esp+8],750
	mov	[esp+12],447
	mov	[esp+4],100
	mov	[esp],750
	call	_fline
	sub	esp,16
	mov	[esp+8],747
	mov	[esp+12],108
	mov	[esp+4],100
	mov	[esp],750
	call	_fline
	sub	esp,16
	mov	[esp+8],753
	mov	[esp+12],108
	mov	[esp+4],100
	mov	[esp],750
	call	_fline
	sub	esp,16
	mov	[esp+8],747
	mov	[esp+12],439
	mov	[esp+4],447
	mov	[esp],750
	call	_fline
	sub	esp,16
	mov	[esp+8],753
	mov	[esp+12],439
	mov	[esp+4],447
	mov	[esp],750
	call	_fline
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],0
	mov	[esp],255
	call	_fcolor
	sub	esp,20
	mov	[esp+12],20
	mov	[esp+16],1
	mov	[esp+8],100
	mov	[esp+4],260
	mov	[esp],350
	call	_frect
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	[esp+12],4
	mov	[esp+16],1
	mov	[esp+8],100
	mov	[esp+4],458
	mov	[esp],350
	call	_frect
	sub	esp,20
	mov	[esp+12],20
	mov	[esp+16],1
	mov	[esp+8],4
	mov	[esp+4],263
	mov	[esp],748
	call	_frect
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],255
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],1
	sub	esp,4
	lea	eax,[ebp-16]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	[esp+4],270
	mov	[esp],400
	call	_ftext
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],1
	sub	esp,4
	lea	eax,[ebp-20]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	[esp+4],460
	mov	[esp],400
	call	_ftext
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],1
	sub	esp,4
	lea	eax,[ebp-24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	[esp+4],273
	mov	[esp],750
	call	_ftext
	call	_fflushkeys
	call	_fwaitkey
	call	_fend
	ret
_2_leave
	mov	[ebp-28],eax
	sub	esp,4
	mov	ebx,[ebp-20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-28]
	mov	[ebp-28],eax
	sub	esp,4
	mov	esi,[ebp-24]
	mov	[esp],esi
	mov	eax,esi
	call	__bbStrRelease
	mov	esi,eax
	mov	eax,[ebp-28]
	mov	[ebp-28],eax
	sub	esp,4
	mov	esi,[ebp-16]
	mov	[esp],esi
	mov	eax,esi
	call	__bbStrRelease
	mov	esi,eax
	mov	eax,[ebp-28]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
_3	.db	"Enter the stated (diagonal) size of your widescreen TV.",0
_4	.db	".",0
_5	.db	".",0
_6	.db	".",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	0

