
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,32
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	mov	[_vmaxx],7
	mov	[_vmaxz],7
	sub	esp,16
	mov	[esp+8],32
	mov	[esp+12],2
	mov	[esp+4],600
	mov	[esp],800
	call	_fgraphics
	sub	esp,4
	mov	eax,_amaparray
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,[_vmaxx]
	mov	esi,_amaparray
	add	esi,12
	mov	[esi],ebx
	mov	ebx,[_vmaxz]
	mov	esi,_amaparray
	add	esi,16
	mov	[esi],ebx
	mov	ebx,1
	mov	esi,_amaparray
	add	esi,20
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_amaparray
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	eax,_apathfindingarray
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,[_vmaxx]
	mov	esi,_apathfindingarray
	add	esi,12
	mov	[esi],ebx
	mov	ebx,[_vmaxz]
	mov	esi,_apathfindingarray
	add	esi,16
	mov	[esi],ebx
	mov	ebx,[_vmaxx]
	mov	esi,_apathfindingarray
	add	esi,20
	mov	[esi],ebx
	mov	ebx,[_vmaxz]
	mov	esi,_apathfindingarray
	add	esi,24
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apathfindingarray
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	eax,_apatharray
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,[_vmaxx]
	mov	esi,_apatharray
	add	esi,12
	mov	[esi],ebx
	mov	ebx,[_vmaxz]
	mov	esi,_apatharray
	add	esi,16
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apatharray
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	eax,_apathtemparray
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,[_vmaxx]
	mov	esi,_apathtemparray
	add	esi,12
	mov	[esi],ebx
	mov	ebx,[_vmaxz]
	mov	esi,_apathtemparray
	add	esi,16
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apathtemparray
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	eax,_apathtotake
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,125
	mov	esi,_apathtotake
	add	esi,12
	mov	[esi],ebx
	mov	ebx,2
	mov	esi,_apathtotake
	add	esi,16
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apathtotake
	mov	[esp],eax
	call	__bbDimArray
	mov	[ebp-4],0
	jmp	_32
_33
	mov	[ebp-8],0
	jmp	_34
_35
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-4]
	add	ebx,[ebp-8]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	call	__bbReadInt
	mov	[ebx],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-4]
	add	ebx,[ebp-8]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp-4]
	add	esi,[ebp-8]
	shl	esi,byte 2
	add	esi,[_apatharray]
	mov	[esi],ebx
	add	[ebp-8],1
_34
	mov	ebx,[_vmaxx]
	cmp	[ebp-8],ebx
	jle	_35
_4
	add	[ebp-4],1
_32
	mov	ebx,[_vmaxz]
	cmp	[ebp-4],ebx
	jle	_33
_3
	sub	esp,4
	mov	[esp],0
	call	_fcalculatepathfindingarray
	call	_fdisplaytestpathfinding
	call	_fend
_l_2skiptohere
	sub	esp,8
	mov	eax,_36
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_freadfile
	mov	[ebp-12],eax
	cmp	[ebp-12],0
	jnz	_37
	sub	esp,8
	mov	eax,_38
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_fruntimeerror
_37
	mov	[ebp-8],0
	jmp	_39
_40
	mov	[ebp-4],0
	jmp	_41
_42
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-4]
	add	ebx,[ebp-8]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	sub	esp,4
	mov	eax,[ebp-12]
	mov	[esp],eax
	call	_freadbyte
	mov	[ebx],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-4]
	add	ebx,[ebp-8]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp-4]
	add	esi,[ebp-8]
	shl	esi,byte 2
	add	esi,[_apatharray]
	mov	[esi],ebx
	add	[ebp-4],1
_41
	mov	ebx,[_vmaxz]
	cmp	[ebp-4],ebx
	jle	_42
_6
	add	[ebp-8],1
_39
	mov	ebx,[_vmaxx]
	cmp	[ebp-8],ebx
	jle	_40
_5
	sub	esp,4
	mov	eax,[ebp-12]
	mov	[esp],eax
	call	_fclosefile
	sub	esp,4
	mov	[esp],0
	call	_fcalculatepathfindingarray
	sub	esp,8
	mov	eax,_43
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_fwritefile
	mov	[ebp-16],eax
	cmp	[ebp-16],0
	jnz	_44
	sub	esp,8
	mov	eax,_45
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_fruntimeerror
_44
	mov	[ebp-20],0
	jmp	_46
_47
	mov	[ebp-24],0
	jmp	_48
_49
	mov	[ebp-28],0
	jmp	_50
_51
	mov	[ebp-32],0
	jmp	_52
_53
	sub	esp,8
	mov	ebx,_apathfindingarray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-24]
	add	ebx,[ebp-20]
	mov	esi,_apathfindingarray
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-28]
	add	ebx,esi
	mov	esi,_apathfindingarray
	add	esi,20
	mov	esi,[esi]
	imul	esi,[ebp-32]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathfindingarray]
	mov	ebx,[ebx]
	mov	[esp+4],ebx
	mov	eax,[ebp-16]
	mov	[esp],eax
	call	_fwritebyte
	add	[ebp-32],1
_52
	mov	ebx,[_vmaxz]
	cmp	[ebp-32],ebx
	jle	_53
_10
	add	[ebp-28],1
_50
	mov	ebx,[_vmaxx]
	cmp	[ebp-28],ebx
	jle	_51
_9
	add	[ebp-24],1
_48
	mov	ebx,[_vmaxz]
	cmp	[ebp-24],ebx
	jle	_49
_8
	add	[ebp-20],1
_46
	mov	ebx,[_vmaxx]
	cmp	[ebp-20],ebx
	jle	_47
_7
	sub	esp,4
	mov	eax,[ebp-16]
	mov	[esp],eax
	call	_fclosefile
	ret
_2_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fcalculatepathfindingarray
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,40
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	mov	[ebp-36],ebx
	call	_fmillisecs
	mov	[ebp-4],eax
	mov	[ebp-8],0
	jmp	_54
_55
	mov	[ebp-12],0
	jmp	_56
_57
	mov	[ebp-16],0
	jmp	_58
_59
	mov	[ebp-20],0
	jmp	_60
_61
	mov	eax,_amaparray
	add	eax,12
	mov	eax,[eax]
	imul	eax,[ebp-12]
	add	eax,[ebp-8]
	mov	ebx,_amaparray
	add	ebx,16
	mov	ebx,[ebx]
	imul	ebx,0
	add	eax,ebx
	shl	eax,byte 2
	add	eax,[_amaparray]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-40],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-20]
	add	ebx,[ebp-16]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-40]
	and	eax,ebx
	and	eax,eax
	jz	_62
	sub	esp,20
	mov	ebx,[ebp-20]
	mov	[esp+12],ebx
	mov	[esp+16],125
	mov	esi,[ebp-16]
	mov	[esp+8],esi
	mov	ebx,[ebp-12]
	mov	[esp+4],ebx
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_fnewpathfind
	mov	ebx,_apathfindingarray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-12]
	add	ebx,[ebp-8]
	mov	esi,_apathfindingarray
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-16]
	add	ebx,esi
	mov	esi,_apathfindingarray
	add	esi,20
	mov	esi,[esi]
	imul	esi,[ebp-20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathfindingarray]
	mov	[ebx],eax
	sub	esp,4
	mov	[esp],57
	call	_fkeydown
	and	eax,eax
	jz	_63
	call	_fcls
	sub	esp,80
	mov	eax,_64
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,[ebp-8]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,_65
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,[ebp-12]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,_66
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,[ebp-16]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,_67
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,[ebp-20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],0
	mov	[esp],0
	call	_ftext
	sub	esp,4
	mov	[esp],1
	call	_fflip
_63
	call	_fmillisecs
	sub	eax,[ebp-24]
	cmp	eax,5000
	jle	_68
	call	_fmillisecs
	mov	[ebp-24],eax
	call	_fcls
	sub	esp,56
	mov	ebx,[ebp-8]
	imul	ebx,[_vmaxx]
	imul	ebx,[_vmaxz]
	imul	ebx,[_vmaxx]
	mov	esi,[ebp-12]
	imul	esi,[_vmaxx]
	imul	esi,[_vmaxz]
	add	ebx,esi
	mov	esi,[ebp-16]
	imul	esi,[_vmaxx]
	add	ebx,esi
	add	ebx,[ebp-20]
	push	ebx
	fild	[esp]
	pop	ebx
	mov	eax,1120403456
	push	eax
	fld	[esp]
	pop	eax
	fmulp	st(1)
	mov	ebx,[_vmaxx]
	imul	ebx,[_vmaxz]
	imul	ebx,[_vmaxx]
	imul	ebx,[_vmaxz]
	push	ebx
	fild	[esp]
	pop	ebx
	fdivp	st(1)
	push	eax
	fstp	[esp]
	pop	eax
	mov	[esp],eax
	call	__bbStrFromFloat
	mov	[esp+4],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,_69
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConcat
	mov	ebx,eax
	mov	[esp],ebx
	sub	esp,4
	mov	eax,_70
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	eax,ebx
	call	__bbStrConcat
	mov	ebx,eax
	mov	[esp],ebx
	sub	esp,4
	mov	eax,_71
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+4],eax
	mov	eax,ebx
	call	__bbStrConcat
	mov	ebx,eax
	mov	[esp],ebx
	sub	esp,4
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	__bbStrFromInt
	mov	[esp+4],eax
	mov	eax,ebx
	call	__bbStrConcat
	mov	ebx,eax
	mov	[esp+8],ebx
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],0
	mov	[esp],0
	call	_ftext
	call	_fmillisecs
	sub	eax,[ebp-4]
	mov	ecx,1000
	cdq
	idiv	ecx
	mov	[ebp-28],eax
	mov	eax,[ebp-28]
	mov	ecx,60
	cdq
	idiv	ecx
	mov	[ebp-32],eax
	sub	esp,8
	mov	eax,[ebp-28]
	mov	[esp],eax
	mov	[esp+4],60
	call	__bbMod
	mov	[ebp-36],eax
	sub	esp,48
	mov	eax,_72
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,[ebp-32]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,_73
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	mov	[ebp-40],eax
	sub	esp,4
	mov	ebx,[ebp-36]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-40]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+8],eax
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+4],15
	mov	[esp],0
	call	_ftext
	sub	esp,4
	mov	[esp],1
	call	_fflip
_68
	sub	esp,4
	mov	[esp],1
	call	_fkeydown
	and	eax,eax
	jz	_74
	call	_fend
_74
_62
	add	[ebp-20],1
_60
	mov	ebx,[_vmaxz]
	cmp	[ebp-20],ebx
	jle	_61
_15
	add	[ebp-16],1
_58
	mov	ebx,[_vmaxx]
	cmp	[ebp-16],ebx
	jle	_59
_14
	add	[ebp-12],1
_56
	mov	ebx,[_vmaxz]
	cmp	[ebp-12],ebx
	jle	_57
_13
	add	[ebp-8],1
_54
	mov	ebx,[_vmaxx]
	cmp	[ebp-8],ebx
	jle	_55
_12
	mov	eax,0
	jmp	_11_leave
_11_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_fnewpathfind
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,20
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[ebp-16],eax
	sub	esp,4
	mov	ebx,_75
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	[esp+4],ebx
	call	__bbStrStore
	sub	esp,4
	mov	eax,_apathtemparray
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,[_vmaxx]
	mov	esi,_apathtemparray
	add	esi,12
	mov	[esi],ebx
	mov	ebx,[_vmaxz]
	mov	esi,_apathtemparray
	add	esi,16
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apathtemparray
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,4
	mov	eax,_apathtotake
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,125
	mov	esi,_apathtotake
	add	esi,12
	mov	[esi],ebx
	mov	ebx,2
	mov	esi,_apathtotake
	add	esi,16
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_apathtotake
	mov	[esp],eax
	call	__bbDimArray
	cmp	[ebp+36],125
	jle	_76
	mov	[ebp+36],125
_76
	mov	ebx,_apatharray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp+24]
	add	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_apatharray]
	mov	ebx,[ebx]
	cmp	ebx,0
	jz	_77
	mov	eax,0
	jmp	_16_leave
_77
	cmp	[ebp+20],0
	setge	al
	movzx	eax,al
	mov	[ebp-16],eax
	cmp	[ebp+24],0
	mov	eax,ebx
	setge	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	mov	[ebp-16],eax
	cmp	[ebp+28],0
	mov	eax,ebx
	setge	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	mov	[ebp-16],eax
	cmp	[ebp+32],0
	mov	eax,ebx
	setge	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	mov	[ebp-16],eax
	mov	ebx,[_vmaxx]
	cmp	[ebp+20],ebx
	mov	eax,ebx
	setle	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	mov	[ebp-16],eax
	mov	ebx,[_vmaxz]
	cmp	[ebp+24],ebx
	mov	eax,ebx
	setle	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	mov	[ebp-16],eax
	mov	ebx,[_vmaxx]
	cmp	[ebp+28],ebx
	mov	eax,ebx
	setle	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	mov	[ebp-16],eax
	mov	ebx,[_vmaxz]
	cmp	[ebp+32],ebx
	mov	eax,ebx
	setle	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-16]
	and	eax,ebx
	and	eax,eax
	jz	_78
	sub	esp,24
	mov	[esp+16],1
	mov	esi,[ebp+36]
	mov	[esp+20],esi
	mov	esi,[ebp+32]
	mov	[esp+12],esi
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+24]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fdepthsearch
	mov	[ebp-8],eax
	cmp	[ebp-8],0
	jle	_79
	sub	esp,28
	mov	eax,_apathtotake
	add	eax,12
	mov	eax,[eax]
	shl	eax,byte 0
	add	eax,1
	shl	eax,byte 2
	add	eax,[_apathtotake]
	mov	eax,[eax]
	mov	[esp],eax
	call	__bbStrFromInt
	mov	[esp],eax
	mov	[esp+4],4
	call	_flset
	mov	[esp],eax
	mov	[ebp-16],eax
	sub	esp,8
	mov	[ebp-20],eax
	sub	esp,4
	mov	ebx,_apathtotake
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,1
	shl	ebx,byte 2
	add	ebx,[_apathtotake]
	mov	ebx,[ebx]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-20]
	mov	[esp],ebx
	mov	[esp+4],4
	mov	eax,ebx
	call	_flset
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp+4],eax
	lea	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrStore
	mov	ebx,eax
	jmp	_80
_79
	sub	esp,8
	lea	eax,[ebp-4]
	mov	[esp],eax
	mov	[ebp-16],eax
	sub	esp,4
	mov	ebx,_81
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	[esp+4],ebx
	call	__bbStrStore
_80
	jmp	_82
_78
_82
	mov	[ebp-12],0
	mov	eax,_apathtotake
	add	eax,12
	mov	eax,[eax]
	imul	eax,0
	add	eax,1
	shl	eax,byte 2
	add	eax,[_apathtotake]
	mov	eax,[eax]
	jmp	_16_leave
	mov	eax,0
	jmp	_16_leave
_16_leave
	mov	[ebp-16],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 20
	.align	16
_fdepthsearch
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,28
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	ebx,[ebp+40]
	cmp	[ebp+36],ebx
	jle	_83
	mov	eax,0
	jmp	_17_leave
_83
	mov	ebx,[ebp+36]
	mov	esi,_apathtemparray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp+24]
	add	esi,[ebp+20]
	shl	esi,byte 2
	add	esi,[_apathtemparray]
	mov	[esi],ebx
	mov	eax,[ebp+28]
	cmp	[ebp+20],eax
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp+32]
	cmp	[ebp+24],ebx
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_84
	mov	eax,[ebp+36]
	jmp	_17_leave
_84
	mov	[ebp-4],0
	cmp	[ebp+20],0
	setg	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-4],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_85
	mov	eax,[ebp+20]
	sub	eax,1
	mov	ebx,_apathtemparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp+24]
	add	eax,ebx
	shl	eax,byte 2
	add	eax,[_apathtemparray]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp+20]
	sub	ebx,1
	mov	esi,_apathtemparray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp+24]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathtemparray]
	mov	ebx,[ebx]
	mov	esi,[ebp+36]
	add	esi,1
	cmp	ebx,esi
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	or	eax,ebx
	mov	[ebp-28],eax
	mov	ebx,[ebp+20]
	sub	ebx,1
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp+24]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apatharray]
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	ebx,eax
	and	ebx,ebx
	jz	_86
	sub	esp,24
	mov	ebx,[ebp+36]
	add	ebx,1
	mov	[esp+16],ebx
	mov	esi,[ebp+40]
	mov	[esp+20],esi
	mov	esi,[ebp+32]
	mov	[esp+12],esi
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+24]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	sub	eax,1
	mov	[esp],eax
	call	_fdepthsearch
	mov	[ebp-8],eax
_86
_85
	cmp	[ebp+24],0
	setg	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-4],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_87
	mov	eax,[ebp+24]
	sub	eax,1
	mov	ebx,_apathtemparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	eax,ebx
	add	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_apathtemparray]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp+24]
	sub	ebx,1
	mov	esi,_apathtemparray
	add	esi,12
	mov	esi,[esi]
	imul	ebx,esi
	add	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_apathtemparray]
	mov	ebx,[ebx]
	mov	esi,[ebp+36]
	add	esi,1
	cmp	ebx,esi
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	or	eax,ebx
	mov	[ebp-28],eax
	mov	ebx,[ebp+24]
	sub	ebx,1
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	ebx,esi
	add	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_apatharray]
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	ebx,eax
	and	ebx,ebx
	jz	_88
	sub	esp,24
	mov	ebx,[ebp+36]
	add	ebx,1
	mov	[esp+16],ebx
	mov	esi,[ebp+40]
	mov	[esp+20],esi
	mov	esi,[ebp+32]
	mov	[esp+12],esi
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+24]
	sub	esi,1
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fdepthsearch
	mov	[ebp-12],eax
_88
_87
	mov	eax,[_vmaxx]
	cmp	[ebp+20],eax
	setl	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-4],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_89
	mov	eax,[ebp+20]
	add	eax,1
	mov	ebx,_apathtemparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp+24]
	add	eax,ebx
	shl	eax,byte 2
	add	eax,[_apathtemparray]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp+20]
	add	ebx,1
	mov	esi,_apathtemparray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp+24]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathtemparray]
	mov	ebx,[ebx]
	mov	esi,[ebp+36]
	add	esi,1
	cmp	ebx,esi
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	or	eax,ebx
	mov	[ebp-28],eax
	mov	ebx,[ebp+20]
	add	ebx,1
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp+24]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apatharray]
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	ebx,eax
	and	ebx,ebx
	jz	_90
	sub	esp,24
	mov	ebx,[ebp+36]
	add	ebx,1
	mov	[esp+16],ebx
	mov	esi,[ebp+40]
	mov	[esp+20],esi
	mov	esi,[ebp+32]
	mov	[esp+12],esi
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+24]
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	add	eax,1
	mov	[esp],eax
	call	_fdepthsearch
	mov	[ebp-16],eax
_90
_89
	mov	eax,[_vmaxz]
	cmp	[ebp+24],eax
	setl	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-4],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_91
	mov	eax,[ebp+24]
	add	eax,1
	mov	ebx,_apathtemparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	eax,ebx
	add	eax,[ebp+20]
	shl	eax,byte 2
	add	eax,[_apathtemparray]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-28],eax
	mov	ebx,[ebp+24]
	add	ebx,1
	mov	esi,_apathtemparray
	add	esi,12
	mov	esi,[esi]
	imul	ebx,esi
	add	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_apathtemparray]
	mov	ebx,[ebx]
	mov	esi,[ebp+36]
	add	esi,1
	cmp	ebx,esi
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	or	eax,ebx
	mov	[ebp-28],eax
	mov	ebx,[ebp+24]
	add	ebx,1
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	ebx,esi
	add	ebx,[ebp+20]
	shl	ebx,byte 2
	add	ebx,[_apatharray]
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	ebx,eax
	and	ebx,ebx
	jz	_92
	sub	esp,24
	mov	ebx,[ebp+36]
	add	ebx,1
	mov	[esp+16],ebx
	mov	esi,[ebp+40]
	mov	[esp+20],esi
	mov	esi,[ebp+32]
	mov	[esp+12],esi
	mov	ebx,[ebp+28]
	mov	[esp+8],ebx
	mov	esi,[ebp+24]
	add	esi,1
	mov	[esp+4],esi
	mov	eax,[ebp+20]
	mov	[esp],eax
	call	_fdepthsearch
	mov	[ebp-20],eax
_92
_91
	cmp	[ebp-4],0
	jnz	_93
	mov	[ebp-24],126
	mov	eax,[ebp-24]
	cmp	[ebp-8],eax
	setl	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-8],0
	mov	eax,ebx
	setnz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_94
	mov	ebx,[ebp-8]
	mov	[ebp-24],ebx
	mov	ebx,3
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	imul	esi,0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	sub	ebx,1
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
_94
	mov	eax,[ebp-24]
	cmp	[ebp-12],eax
	setl	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-12],0
	mov	eax,ebx
	setnz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_95
	mov	ebx,[ebp-12]
	mov	[ebp-24],ebx
	mov	ebx,1
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	imul	esi,0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	sub	ebx,1
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
_95
	mov	eax,[ebp-24]
	cmp	[ebp-16],eax
	setl	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-16],0
	mov	eax,ebx
	setnz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_96
	mov	ebx,[ebp-16]
	mov	[ebp-24],ebx
	mov	ebx,4
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	imul	esi,0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	add	ebx,1
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
_96
	mov	eax,[ebp-24]
	cmp	[ebp-20],eax
	setl	al
	movzx	eax,al
	mov	[ebp-28],eax
	cmp	[ebp-20],0
	mov	eax,ebx
	setnz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-28]
	and	eax,ebx
	and	eax,eax
	jz	_97
	mov	ebx,[ebp-20]
	mov	[ebp-24],ebx
	mov	ebx,2
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	imul	esi,0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+20]
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	ebx,[ebp+24]
	add	ebx,1
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
_97
	cmp	[ebp-24],126
	jnz	_98
	mov	eax,0
	jmp	_17_leave
	jmp	_99
_98
	mov	eax,[ebp-24]
	jmp	_17_leave
_99
	jmp	_100
_93
	mov	ebx,_apathfindingarray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp+24]
	add	ebx,[ebp+20]
	mov	esi,_apathfindingarray
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp+28]
	add	ebx,esi
	mov	esi,_apathfindingarray
	add	esi,20
	mov	esi,[esi]
	imul	esi,[ebp+32]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathfindingarray]
	mov	ebx,[ebx]
	mov	esi,_apathtotake
	add	esi,12
	mov	esi,[esi]
	imul	esi,0
	add	esi,[ebp+36]
	shl	esi,byte 2
	add	esi,[_apathtotake]
	mov	[esi],ebx
	mov	eax,0
	jmp	_17_leave
_100
	mov	eax,0
	jmp	_17_leave
_17_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 24
	.align	16
_fdisplaytestpathfinding
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,52
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	mov	[ebp-36],ebx
	mov	[ebp-40],ebx
	mov	[ebp-44],ebx
	mov	[ebp-4],0
	mov	ebx,[_vmaxz]
	sub	ebx,1
	mov	[ebp-8],ebx
_101
	call	_fcls
	mov	[ebp-12],0
	jmp	_102
_103
	mov	[ebp-16],0
	jmp	_104
_105
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-16]
	add	ebx,[ebp-12]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	cmp	ebx,1
	jnz	_106
	sub	esp,12
	mov	[esp+4],80
	mov	[esp+8],80
	mov	[esp],80
	call	_fcolor
	sub	esp,20
	mov	[esp+12],10
	mov	[esp+16],1
	mov	[esp+8],10
	mov	ebx,[ebp-16]
	imul	ebx,10
	mov	[esp+4],ebx
	mov	eax,[ebp-12]
	imul	eax,10
	mov	[esp],eax
	call	_frect
_106
	add	[ebp-16],1
_104
	mov	ebx,[_vmaxz]
	cmp	[ebp-16],ebx
	jle	_105
_21
	add	[ebp-12],1
_102
	mov	ebx,[_vmaxx]
	cmp	[ebp-12],ebx
	jle	_103
_20
	call	_fmillisecs
	sub	eax,[ebp-20]
	cmp	eax,1000
	setg	al
	movzx	eax,al
	mov	[ebp-48],eax
	mov	[ebp-52],eax
	sub	esp,4
	mov	[esp],57
	mov	eax,ebx
	call	_fkeyhit
	mov	ebx,eax
	mov	eax,[ebp-52]
	cmp	ebx,0
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-48]
	or	eax,ebx
	mov	[ebp-48],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-8]
	add	ebx,[ebp-4]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	cmp	ebx,1
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-48]
	or	eax,ebx
	mov	[ebp-48],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-28]
	add	ebx,[ebp-24]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	cmp	ebx,1
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-48]
	or	eax,ebx
	and	eax,eax
	jz	_107
	call	_fflushkeys
	call	_fmillisecs
	mov	[ebp-20],eax
	sub	[ebp-4],1
	cmp	[ebp-4],0
	jge	_108
	mov	ebx,[_vmaxx]
	mov	[ebp-4],ebx
	sub	[ebp-8],1
_108
	cmp	[ebp-8],0
	jge	_109
	mov	ebx,[_vmaxz]
	mov	[ebp-8],ebx
_109
	sub	esp,8
	mov	[esp],0
	mov	ebx,[_vmaxx]
	mov	[esp+4],ebx
	call	_frand
	mov	[ebp-24],eax
	sub	esp,8
	mov	[esp],0
	mov	ebx,[_vmaxz]
	mov	[esp+4],ebx
	call	_frand
	mov	[ebp-28],eax
_107
	mov	eax,_amaparray
	add	eax,12
	mov	eax,[eax]
	imul	eax,[ebp-8]
	add	eax,[ebp-4]
	mov	ebx,_amaparray
	add	ebx,16
	mov	ebx,[ebx]
	imul	ebx,0
	add	eax,ebx
	shl	eax,byte 2
	add	eax,[_amaparray]
	mov	eax,[eax]
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-48],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-28]
	add	ebx,[ebp-24]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	cmp	ebx,0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-48]
	and	eax,ebx
	and	eax,eax
	jz	_110
	mov	[ebp-32],0
	mov	ebx,[ebp-4]
	mov	[ebp-36],ebx
	mov	ebx,[ebp-8]
	mov	[ebp-40],ebx
_111
	add	[ebp-32],1
	cmp	[ebp-32],1
	jnz	_112
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	jmp	_113
_112
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],0
	mov	[esp],255
	call	_fcolor
_113
	sub	esp,20
	mov	[esp+12],6
	mov	[esp+16],1
	mov	[esp+8],6
	mov	ebx,[ebp-40]
	imul	ebx,10
	add	ebx,2
	mov	[esp+4],ebx
	mov	eax,[ebp-36]
	imul	eax,10
	add	eax,2
	mov	[esp],eax
	call	_frect
	mov	ebx,_apathfindingarray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-40]
	add	ebx,[ebp-36]
	mov	esi,_apathfindingarray
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-24]
	add	ebx,esi
	mov	esi,_apathfindingarray
	add	esi,20
	mov	esi,[esi]
	imul	esi,[ebp-28]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathfindingarray]
	mov	ebx,[ebx]
	mov	[ebp-44],ebx
	cmp	[ebp-44],1
	jz	_115
	cmp	[ebp-44],2
	jz	_116
	cmp	[ebp-44],4
	jz	_117
	cmp	[ebp-44],3
	jz	_118
	jmp	_114
_115
	sub	[ebp-40],1
	jmp	_114
_116
	add	[ebp-40],1
	jmp	_114
_117
	add	[ebp-36],1
	jmp	_114
_118
	sub	[ebp-36],1
	jmp	_114
_114
	mov	eax,[ebp-24]
	cmp	[ebp-36],eax
	setz	al
	movzx	eax,al
	mov	[ebp-48],eax
	mov	ebx,[ebp-28]
	cmp	[ebp-40],ebx
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-48]
	and	eax,ebx
	mov	[ebp-48],eax
	cmp	[ebp-32],125
	mov	eax,ebx
	setg	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-48]
	or	ebx,eax
	and	ebx,ebx
	jz	_111
_22
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	[esp+12],6
	mov	[esp+16],1
	mov	[esp+8],6
	mov	ebx,[ebp-28]
	imul	ebx,10
	add	ebx,2
	mov	[esp+4],ebx
	mov	eax,[ebp-24]
	imul	eax,10
	add	eax,2
	mov	[esp],eax
	call	_frect
	jmp	_119
_110
	add	[ebp-20],1000
_119
	sub	esp,4
	mov	[esp],1
	call	_fflip
	sub	esp,4
	mov	[esp],1
	call	_fkeydown
	cmp	eax,0
	jle	_101
_19
	mov	eax,0
	jmp	_18_leave
_18_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_freadmapfile
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,16
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	sub	esp,8
	lea	eax,[ebp+20]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_freadfile
	mov	[ebp-4],eax
	mov	[ebp-8],0
	jmp	_120
_121
	mov	[ebp-12],0
	jmp	_122
_123
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-12]
	add	ebx,[ebp-8]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	_freadbyte
	mov	[ebx],eax
	mov	ebx,_amaparray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-12]
	add	ebx,[ebp-8]
	mov	esi,_amaparray
	add	esi,16
	mov	esi,[esi]
	imul	esi,0
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_amaparray]
	mov	ebx,[ebx]
	mov	esi,_apatharray
	add	esi,12
	mov	esi,[esi]
	imul	esi,[ebp-12]
	add	esi,[ebp-8]
	shl	esi,byte 2
	add	esi,[_apatharray]
	mov	[esi],ebx
	add	[ebp-12],1
_122
	mov	ebx,[_vmaxz]
	cmp	[ebp-12],ebx
	jle	_123
_26
	add	[ebp-8],1
_120
	mov	ebx,[_vmaxx]
	cmp	[ebp-8],ebx
	jle	_121
_25
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	_fclosefile
	mov	eax,0
	jmp	_24_leave
_24_leave
	mov	[ebp-16],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-16]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	16
_freadpathfile
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,24
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	sub	esp,8
	lea	eax,[ebp+20]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_freadfile
	mov	[ebp-4],eax
	mov	[ebp-8],0
	jmp	_124
_125
	mov	[ebp-12],0
	jmp	_126
_127
	mov	[ebp-16],0
	jmp	_128
_129
	mov	[ebp-20],0
	jmp	_130
_131
	mov	ebx,_apathfindingarray
	add	ebx,12
	mov	ebx,[ebx]
	imul	ebx,[ebp-12]
	add	ebx,[ebp-8]
	mov	esi,_apathfindingarray
	add	esi,16
	mov	esi,[esi]
	imul	esi,[ebp-16]
	add	ebx,esi
	mov	esi,_apathfindingarray
	add	esi,20
	mov	esi,[esi]
	imul	esi,[ebp-20]
	add	ebx,esi
	shl	ebx,byte 2
	add	ebx,[_apathfindingarray]
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	_freadbyte
	mov	[ebx],eax
	add	[ebp-20],1
_130
	mov	ebx,[_vmaxz]
	cmp	[ebp-20],ebx
	jle	_131
_31
	add	[ebp-16],1
_128
	mov	ebx,[_vmaxx]
	cmp	[ebp-16],ebx
	jle	_129
_30
	add	[ebp-12],1
_126
	mov	ebx,[_vmaxz]
	cmp	[ebp-12],ebx
	jle	_127
_29
	add	[ebp-8],1
_124
	mov	ebx,[_vmaxx]
	cmp	[ebp-8],ebx
	jle	_125
_28
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	_fclosefile
	mov	eax,0
	jmp	_27_leave
_27_leave
	mov	[ebp-24],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-24]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 4
	.align	4
_vmaxx	.dd	0
	.align	4
_vmaxz	.dd	0
	.align	4
_amaparray	.dd	0
	.dd	1
	.dd	3
	.dd	0
	.dd	0
	.dd	0
	.align	4
_apathfindingarray	.dd	0
	.dd	1
	.dd	4
	.dd	0
	.dd	0
	.dd	0
	.dd	0
	.align	4
_apatharray	.dd	0
	.dd	1
	.dd	2
	.dd	0
	.dd	0
	.align	4
_apathtemparray	.dd	0
	.dd	1
	.dd	2
	.dd	0
	.dd	0
	.align	4
_apathtotake	.dd	0
	.dd	1
	.dd	2
	.dd	0
	.dd	0
_36	.db	"Your Map File Here",0
_38	.db	"You have to put a valid map file in for this to work",0
_43	.db	"your pre calculated path file name goes here",0
_45	.db	"something went wrong trying to write the path finding file to disk",0
_64	.db	"Progress:Xi=",0
_65	.db	", Zi=",0
_66	.db	", Xf=",0
_67	.db	", Zf=",0
_69	.db	"Progress:",0
_70	.db	"%",0
_71	.db	", Map Number:",0
_72	.db	"Time:",0
_73	.db	":",0
_75	.db	"",0
_81	.db	"",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	0
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	1
	.dd	0

