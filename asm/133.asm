
	.align	16
__MAIN
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,8
	sub	esp,4
	mov	eax,__DATA
	mov	[esp],eax
	call	__bbRestore
	sub	esp,4
	mov	eax,__LIBS
	mov	[esp],eax
	call	__bbLoadLibs
	call	_2_begin
	jmp	_2_leave
_2_begin
	mov	[ebp-4],0
	sub	esp,16
	mov	[esp+8],0
	mov	[esp+12],2
	mov	[esp+4],480
	mov	[esp],640
	call	_fgraphics
	sub	esp,12
	mov	eax,_6
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,_7
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+4],ebx
	call	_fapptitle
	sub	esp,4
	call	_fbackbuffer
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,4
	mov	eax,_aarea
	mov	[esp],eax
	call	__bbUndimArray
	mov	ebx,3
	mov	esi,_aarea
	add	esi,12
	mov	[esi],ebx
	mov	ebx,3
	mov	esi,_aarea
	add	esi,16
	mov	[esi],ebx
	sub	esp,4
	mov	eax,_aarea
	mov	[esp],eax
	call	__bbDimArray
	sub	esp,12
	mov	[esp+4],128
	mov	[esp+8],128
	mov	[esp],0
	call	_fclscolor
	call	_fcls
	sub	esp,20
	mov	eax,_10
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp+8],eax
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,_11
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+12],ebx
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,_9
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+4],ebx
	sub	esp,4
	mov	eax,_8
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_fwin_popup
	mov	[ebp-4],eax
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],0
	mov	[esp],255
	call	_fcolor
	sub	esp,16
	mov	eax,_12
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	mov	[ebp-8],eax
	sub	esp,4
	mov	ebx,[ebp-4]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrFromInt
	mov	ebx,eax
	mov	eax,[ebp-8]
	mov	[esp+4],ebx
	call	__bbStrConcat
	mov	[esp],eax
	call	_fprint
	call	_fflushkeys
	call	_fwaitkey
	call	_fend
	ret
_2_leave
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 0
	.align	16
_fwin_popup
	push	ebx
	push	esi
	push	edi
	push	ebp
	mov	ebp,esp
	sub	esp,60
	mov	ebx,0
	mov	[ebp-4],ebx
	mov	[ebp-8],ebx
	mov	[ebp-12],ebx
	mov	[ebp-16],ebx
	mov	[ebp-20],ebx
	mov	[ebp-24],ebx
	mov	[ebp-28],ebx
	mov	[ebp-32],ebx
	mov	[ebp-36],ebx
	mov	[ebp-40],ebx
	mov	[ebp-44],ebx
	mov	[ebp-48],ebx
	mov	[ebp-52],ebx
	sub	esp,20
	mov	[esp+12],0
	mov	[esp+16],0
	mov	[esp+8],1
	mov	[esp+4],20
	sub	esp,4
	mov	eax,_13
	mov	[esp],eax
	call	__bbStrConst
	mov	[esp],eax
	call	_floadfont
	mov	[ebp-4],eax
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	_fsetfont
	call	_fshowpointer
	call	_fgraphicsbuffer
	mov	[ebp-8],eax
	sub	esp,8
	lea	eax,[ebp+20]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	call	_fstringwidth
	add	eax,100
	mov	[ebp-12],eax
	mov	[ebp-16],100
	call	_fgraphicswidth
	sub	eax,[ebp-12]
	sar	eax,byte 1
	mov	[ebp-20],eax
	call	_fgraphicsheight
	sub	eax,[ebp-16]
	sar	eax,byte 1
	mov	[ebp-24],eax
	mov	[ebp-28],80
	mov	[ebp-32],30
	mov	[ebp-44],10
	sub	esp,16
	mov	ebx,[ebp-44]
	shl	ebx,byte 1
	add	ebx,[ebp-12]
	mov	[esp+8],ebx
	mov	esi,[ebp-44]
	shl	esi,byte 1
	add	esi,[ebp-16]
	mov	[esp+12],esi
	mov	esi,[ebp-24]
	sub	esi,[ebp-44]
	mov	[esp+4],esi
	mov	eax,[ebp-20]
	sub	eax,[ebp-44]
	mov	[esp],eax
	call	_fviewport
	sub	esp,12
	mov	[esp+4],72
	mov	[esp+8],72
	mov	[esp],72
	call	_fcolor
	sub	esp,20
	mov	ebx,[ebp-16]
	mov	[esp+12],ebx
	mov	[esp+16],1
	mov	esi,[ebp-12]
	mov	[esp+8],esi
	mov	ebx,[ebp-24]
	add	ebx,[ebp-44]
	mov	[esp+4],ebx
	mov	eax,[ebp-20]
	add	eax,[ebp-44]
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],192
	mov	[esp+8],192
	mov	[esp],192
	call	_fcolor
	sub	esp,20
	mov	ebx,[ebp-16]
	mov	[esp+12],ebx
	mov	[esp+16],1
	mov	esi,[ebp-12]
	mov	[esp+8],esi
	mov	ebx,[ebp-24]
	mov	[esp+4],ebx
	mov	eax,[ebp-20]
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],128
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	[esp+12],25
	mov	[esp+16],1
	mov	esi,[ebp-12]
	sub	esi,2
	mov	[esp+8],esi
	mov	ebx,[ebp-24]
	add	ebx,1
	mov	[esp+4],ebx
	mov	eax,[ebp-20]
	add	eax,1
	mov	[esp],eax
	call	_frect
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],0
	sub	esp,4
	lea	eax,[ebp+20]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	ebx,[ebp-24]
	add	ebx,3
	mov	[esp+4],ebx
	mov	eax,[ebp-12]
	sar	eax,byte 1
	add	eax,[ebp-20]
	mov	[esp],eax
	call	_ftext
	mov	ebx,[ebp-20]
	add	ebx,10
	mov	[ebp-36],ebx
	mov	ebx,[ebp-24]
	add	ebx,50
	mov	[ebp-40],ebx
	sub	esp,12
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-56],eax
	sub	esp,4
	mov	ebx,_15
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-56]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jz	_14
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	ebx,[ebp-32]
	mov	[esp+12],ebx
	mov	[esp+16],0
	mov	esi,[ebp-28]
	mov	[esp+8],esi
	mov	ebx,[ebp-40]
	mov	[esp+4],ebx
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_frect
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],0
	sub	esp,4
	lea	eax,[ebp+24]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	ebx,[ebp-40]
	add	ebx,5
	mov	[esp+4],ebx
	mov	eax,[ebp-28]
	sar	eax,byte 1
	add	eax,[ebp-36]
	mov	[esp],eax
	call	_ftext
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,16
	mov	ebx,[ebp-36]
	add	ebx,[ebp-28]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	esi,[ebp-40]
	mov	[esp+12],esi
	mov	esi,[ebp-40]
	mov	[esp+4],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_fline
	sub	esp,16
	mov	ebx,[ebp-36]
	mov	[esp+8],ebx
	mov	esi,[ebp-40]
	add	esi,[ebp-32]
	sub	esi,1
	mov	[esp+12],esi
	mov	esi,[ebp-40]
	mov	[esp+4],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_fline
	mov	ebx,[ebp-36]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,1
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	[esi],ebx
	mov	ebx,[ebp-40]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,1
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	[esi],ebx
_14
	mov	ebx,[ebp-12]
	sar	ebx,byte 1
	add	ebx,[ebp-20]
	mov	esi,[ebp-28]
	sar	esi,byte 1
	sub	ebx,esi
	mov	[ebp-36],ebx
	sub	esp,12
	lea	eax,[ebp+28]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-56],eax
	sub	esp,4
	mov	ebx,_17
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-56]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jz	_16
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	ebx,[ebp-32]
	mov	[esp+12],ebx
	mov	[esp+16],0
	mov	esi,[ebp-28]
	mov	[esp+8],esi
	mov	ebx,[ebp-40]
	mov	[esp+4],ebx
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_frect
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],0
	sub	esp,4
	lea	eax,[ebp+28]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	ebx,[ebp-40]
	add	ebx,5
	mov	[esp+4],ebx
	mov	eax,[ebp-28]
	sar	eax,byte 1
	add	eax,[ebp-36]
	mov	[esp],eax
	call	_ftext
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,16
	mov	ebx,[ebp-36]
	add	ebx,[ebp-28]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	esi,[ebp-40]
	mov	[esp+12],esi
	mov	esi,[ebp-40]
	mov	[esp+4],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_fline
	sub	esp,16
	mov	ebx,[ebp-36]
	mov	[esp+8],ebx
	mov	esi,[ebp-40]
	add	esi,[ebp-32]
	sub	esi,1
	mov	[esp+12],esi
	mov	esi,[ebp-40]
	mov	[esp+4],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_fline
	mov	ebx,[ebp-36]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,2
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	[esi],ebx
	mov	ebx,[ebp-40]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,2
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	[esi],ebx
_16
	mov	ebx,[ebp-20]
	add	ebx,[ebp-12]
	sub	ebx,[ebp-28]
	sub	ebx,10
	mov	[ebp-36],ebx
	sub	esp,12
	lea	eax,[ebp+32]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp],eax
	mov	[ebp-56],eax
	sub	esp,4
	mov	ebx,_19
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrConst
	mov	ebx,eax
	mov	eax,[ebp-56]
	mov	[esp+4],ebx
	call	__bbStrCompare
	cmp	eax,0
	jz	_18
	sub	esp,12
	mov	[esp+4],0
	mov	[esp+8],0
	mov	[esp],0
	call	_fcolor
	sub	esp,20
	mov	ebx,[ebp-32]
	mov	[esp+12],ebx
	mov	[esp+16],0
	mov	esi,[ebp-28]
	mov	[esp+8],esi
	mov	ebx,[ebp-40]
	mov	[esp+4],ebx
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_frect
	sub	esp,20
	mov	[esp+12],1
	mov	[esp+16],0
	sub	esp,4
	lea	eax,[ebp+32]
	mov	[esp],eax
	call	__bbStrLoad
	mov	[esp+8],eax
	mov	ebx,[ebp-40]
	add	ebx,5
	mov	[esp+4],ebx
	mov	eax,[ebp-28]
	sar	eax,byte 1
	add	eax,[ebp-36]
	mov	[esp],eax
	call	_ftext
	sub	esp,12
	mov	[esp+4],255
	mov	[esp+8],255
	mov	[esp],255
	call	_fcolor
	sub	esp,16
	mov	ebx,[ebp-36]
	add	ebx,[ebp-28]
	sub	ebx,1
	mov	[esp+8],ebx
	mov	esi,[ebp-40]
	mov	[esp+12],esi
	mov	esi,[ebp-40]
	mov	[esp+4],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_fline
	sub	esp,16
	mov	ebx,[ebp-36]
	mov	[esp+8],ebx
	mov	esi,[ebp-40]
	add	esi,[ebp-32]
	sub	esi,1
	mov	[esp+12],esi
	mov	esi,[ebp-40]
	mov	[esp+4],esi
	mov	eax,[ebp-36]
	mov	[esp],eax
	call	_fline
	mov	ebx,[ebp-36]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,3
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	[esi],ebx
	mov	ebx,[ebp-40]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,3
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	[esi],ebx
_18
	sub	esp,4
	mov	[esp],1
	call	_fflip
	mov	[ebp-48],0
	jmp	_21
_20
	sub	esp,4
	mov	[esp],1
	call	_fmousehit
	and	eax,eax
	jz	_22
	mov	[ebp-52],1
	jmp	_23
_24
	call	_fmousex
	mov	ebx,_aarea
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 0
	add	ebx,[ebp-52]
	shl	ebx,byte 2
	add	ebx,[_aarea]
	mov	ebx,[ebx]
	cmp	eax,ebx
	setg	al
	movzx	eax,al
	mov	[ebp-56],eax
	mov	[ebp-60],eax
	mov	eax,ebx
	call	_fmousex
	mov	ebx,eax
	mov	eax,[ebp-60]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 0
	add	esi,[ebp-52]
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	esi,[esi]
	add	esi,[ebp-28]
	cmp	ebx,esi
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-56]
	and	eax,ebx
	and	eax,eax
	jz	_25
	call	_fmousey
	mov	ebx,_aarea
	add	ebx,12
	mov	ebx,[ebx]
	shl	ebx,byte 1
	add	ebx,[ebp-52]
	shl	ebx,byte 2
	add	ebx,[_aarea]
	mov	ebx,[ebx]
	cmp	eax,ebx
	setg	al
	movzx	eax,al
	mov	[ebp-56],eax
	mov	[ebp-60],eax
	mov	eax,ebx
	call	_fmousey
	mov	ebx,eax
	mov	eax,[ebp-60]
	mov	esi,_aarea
	add	esi,12
	mov	esi,[esi]
	shl	esi,byte 1
	add	esi,[ebp-52]
	shl	esi,byte 2
	add	esi,[_aarea]
	mov	esi,[esi]
	add	esi,[ebp-32]
	cmp	ebx,esi
	mov	eax,ebx
	setl	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-56]
	and	eax,ebx
	and	eax,eax
	jz	_26
	mov	ebx,[ebp-52]
	mov	[ebp-48],ebx
	jmp	_5
_26
_25
	add	[ebp-52],1
_23
	cmp	[ebp-52],3
	jle	_24
_5
_22
_21
	sub	esp,4
	mov	[esp],1
	call	_fkeydown
	cmp	eax,0
	setz	al
	movzx	eax,al
	mov	[ebp-56],eax
	cmp	[ebp-48],0
	mov	eax,ebx
	setz	al
	movzx	eax,al
	mov	ebx,eax
	mov	eax,[ebp-56]
	and	eax,ebx
	and	eax,eax
	jnz	_20
_4
	call	_fcls
	sub	esp,16
	call	_fgraphicswidth
	mov	[esp+8],eax
	mov	[ebp-56],eax
	mov	eax,ebx
	call	_fgraphicsheight
	mov	ebx,eax
	mov	eax,[ebp-56]
	mov	[esp+12],ebx
	mov	[esp+4],0
	mov	[esp],0
	call	_fviewport
	sub	esp,4
	mov	eax,[ebp-8]
	mov	[esp],eax
	call	_fsetbuffer
	sub	esp,4
	mov	eax,[ebp-4]
	mov	[esp],eax
	call	_ffreefont
	mov	eax,[ebp-48]
	jmp	_3_leave
	mov	eax,0
	jmp	_3_leave
_3_leave
	mov	[ebp-56],eax
	sub	esp,4
	mov	ebx,[ebp+28]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-56]
	mov	[ebp-56],eax
	sub	esp,4
	mov	esi,[ebp+32]
	mov	[esp],esi
	mov	eax,esi
	call	__bbStrRelease
	mov	esi,eax
	mov	eax,[ebp-56]
	mov	[ebp-56],eax
	sub	esp,4
	mov	esi,[ebp+24]
	mov	[esp],esi
	mov	eax,esi
	call	__bbStrRelease
	mov	esi,eax
	mov	eax,[ebp-56]
	mov	[ebp-56],eax
	sub	esp,4
	mov	ebx,[ebp+20]
	mov	[esp],ebx
	mov	eax,ebx
	call	__bbStrRelease
	mov	ebx,eax
	mov	eax,[ebp-56]
	mov	esp,ebp
	pop	ebp
	pop	edi
	pop	esi
	pop	ebx
	ret	word 16
_6	.db	"Simple Window Demo",0
_7	.db	"",0
	.align	4
_aarea	.dd	0
	.dd	1
	.dd	2
	.dd	0
	.dd	0
_8	.db	"Sure you want to quit ?",0
_9	.db	"YES",0
_10	.db	"NO",0
_11	.db	"CANCEL",0
_12	.db	"Button pressed = ",0
_13	.db	"arial.ttf",0
_15	.db	"",0
_17	.db	"",0
_19	.db	"",0
	.align	4
__LIBS
	.db	"",0
	.align	4
__DATA
	.dd	0

